import React from "react";
import FeedbackIcon from "@material-ui/icons/FeedbackOutlined";
import Button from "@material-ui/core/Button";
import { ScholarReaderContext, PaperId } from "./state";
import queryString from "querystring";

function mkFeedbackLink(paperId?: PaperId, extraContext?: Object) {
    // The URL and field ids below are generated by Google. The identifiers
    // are opaque to us, which means they could change (say, if we modify
    // the assocaited form). If this proves to be an issue we'll have to think
    // through alternative feedback mechanisms.
    const baseUrl = "https://docs.google.com/forms/d/e/1FAIpQLSdnTn4ng-3SsNqwr6M7yF54IhABNAw9_KIjPdWC746fIe546w/viewform";
    const params = {
        "entry.331961046": JSON.stringify(Object.assign(
            {},
            extraContext || {},
            { paperId }
        ))
    };
    return `${baseUrl}?${queryString.stringify(params)}`;
}

// Controls the visual appearance of the button. The toolbar variant mimics
// the appearance of buttons rendered by the default PDF viewing experience.
type ButtonVariant = "default" | "toolbar";

interface Props {
    variant?: ButtonVariant;
    extraContext?: Object;
}

function openFeedbackWindow(url: string) {
    window.open(url, "scholar-reader-feedback", "width=640,height=829");
}

const FeedbackButton = ({ variant, extraContext }: Props) => {
    switch (variant) {
        case "toolbar": {
            return (
                <ScholarReaderContext.Consumer>{({ paperId }) => (
                    <button
                        onClick={() => openFeedbackWindow(mkFeedbackLink(paperId, extraContext))}
                        className="toolbarButton hiddenLargeView toolbar__feedback-button"
                        title="Submit Feedback"
                    >
                        <FeedbackIcon fontSize="large" />
                        <span>Submit Feedback</span>
                    </button>
                )}</ScholarReaderContext.Consumer>
            )
        }
        case "default":
        default: {
            return (
                <ScholarReaderContext.Consumer>{({ paperId }) => (
                    <Button
                        onClick={() => openFeedbackWindow(mkFeedbackLink(paperId, extraContext))}
                        className="feedback-button"
                    >
                        <FeedbackIcon fontSize="large" />
                    </Button>
                )}</ScholarReaderContext.Consumer>
            );
        }
    }
};

export default FeedbackButton;
