import React from "react";
import { PDFViewer } from "./types/pdfjs-viewer";
import * as uiUtils from "./ui-utils";

interface Props {
  pdfViewer: PDFViewer;
  handleDeselectSelection: () => void;
}

/**
 * Determine whether a click event targets a selectable element.
 */
function isClickInSelectable(event: MouseEvent) {
  return (
    event.currentTarget instanceof HTMLDivElement &&
    event.currentTarget.classList.contains("scholar-reader-annotation-span")
  );
}

/**
 * An overlay on top of the PDF Viewer that triggers state changes based on click and keyboard
 * events. This overlay currently operates by adding event handlers to the container of
 * the PDF viewer generated by pdf.js. The component does not make any new DOM elements.
 *
 * In a past implementation, this component added a transparent overlay 'div' element on top of
 * the PDF viewer. That implementation was abandoned because the overlay intercepted click and
 * keyboard events that were meant for the page or for annotations on the page. In the current
 * implementation, clicks on the page or annotations will be processed by the page or annotation
 * *and* processed by this overlay, as in this overlay, event handlers are attached to a
 * parent element of all pages and annotations.
 */
class ViewerOverlay extends React.PureComponent<Props> {
  constructor(props: Props) {
    super(props);
    this.onClick = this.onClick.bind(this);
    this.onKeyUp = this.onKeyUp.bind(this);
  }

  componentDidMount() {
    this.addEventListenersToViewer(this.props.pdfViewer);
  }

  componentWillUpdate(prevProps: Props, props: Props) {
    if (prevProps.pdfViewer !== props.pdfViewer) {
      this.removeEventListenersForViewer(prevProps.pdfViewer);
      this.addEventListenersToViewer(props.pdfViewer);
    }
  }

  componentWillUnmount() {
    this.removeEventListenersForViewer(this.props.pdfViewer);
  }

  addEventListenersToViewer(pdfViewer: PDFViewer) {
    pdfViewer.container.addEventListener("click", this.onClick);
    /*
     * It's possible to listen for key events on the PDF viewer container as the pdf.js source code
     * has allowed the container to have focus by setting 'tabindex=0'. We may need to check to
     * make sure that future versions of the pdf.js application still allow the viewer container to
     * receive focus. Otherwise, key events will appear to do nothing.
     */
    pdfViewer.container.addEventListener("keyup", this.onKeyUp);
  }

  removeEventListenersForViewer(pdfViewer: PDFViewer) {
    pdfViewer.container.removeEventListener("click", this.onClick);
    pdfViewer.container.removeEventListener("keyup", this.onKeyUp);
  }

  onClick(event: MouseEvent) {
    if (!isClickInSelectable(event)) {
      this.props.handleDeselectSelection();
    }
  }

  onKeyUp(event: KeyboardEvent) {
    if (uiUtils.isKeypressEscape(event)) {
      this.props.handleDeselectSelection();
    }
  }

  render() {
    return null;
  }
}

export default ViewerOverlay;
