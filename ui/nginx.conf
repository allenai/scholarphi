user              nginx;
worker_processes  auto;

error_log  stderr warn;
pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
}

http {
    # Accept the X-Forwarded-For header from the reverse proxy we run
    # TODO (@codeviking): Verify we don't need a CIDR mask here and that
    # this is working.
    set_real_ip_from    127.0.0.1;
    real_ip_header      X-Forwarded-For;

    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    sendfile            on;
    keepalive_timeout   65;

    gzip  on;

    # Don't tell everyone we're running nginx, security through obscurity and
    # all that
    server_tokens off;

    # Output request logs in a fashion that's parseable by Google so we can
    # execute structure searches against aggregated logs.
    log_format json escape=json '{'
        '"time": "$time_iso8601",'
        '"request_method": "$request_method",'
        '"request_uri": "$scheme://$host$request_uri",'
        '"status": $status,'
        '"request_length": $request_length,'
        '"body_bytes_sent": $body_bytes_sent,'
        '"user_agent": "$http_user_agent",'
        '"ip": "$remote_addr",'
        '"realip": "$realip_remote_addr",'
        '"referer": "$http_referer",'
        '"host": "$host",'
        '"scheme": "$scheme"'
    '}';

    server {
        # We listen on 4000, as we run a reverse proxy on 80 that forward
        # traffic to this server.
        listen [::]:4000;
        listen 4000;

        charset utf-8;

        # Print the request log (access log) to stdout and use the json format
        # we defined up above.
        access_log /dev/stdout json;

        root /ui;
        index index.html;

        location / {
            try_files $uri /index.html;
        }
    }
}
