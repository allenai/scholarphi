{
  // Use IntelliSense to learn about possible attributes.
  // Hover to view descriptions of existing attributes.
  // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
  "version": "0.2.0",
  "configurations": [
    {
      "type": "node",
      "request": "launch",
      "name": "Run Server",
      "runtimeArgs": ["--nolazy", "-r", "ts-node/register"],
      "args": [
        "${workspaceFolder}/src/index.ts",
        /*
         * Uncomment the following argument to set the API to use an experimental database
         * schema, instead of the default 'public' database schema, for instance 'dev'.
         */
        "--database:schema=dev"
      ],
      "cwd": "${workspaceRoot}",
      "sourceMaps": true,
      "outFiles": ["${workspaceFolder}/**/*.ts"]
    },
    {
      "type": "node",
      "request": "launch",
      "name": "Run tests",
      "program": "${workspaceFolder}/node_modules/.bin/jest",
      "args": [
        "--runInBand",
        /*
         * Test timeout can be set to a very large value to prevent the test runner from
         * terminating one of our tests when we are stepping through the code. This is particularly
         * important when inspecting database queries, as a quick timeout might result in the
         * test runner destroying the test database while it's being inspected.
         */
        "--testTimeout",
        "3600000"
        /*
         * If jest reports test failures that look like the result of stale code,
         * enable this option for a single run of this launch config to clear the cache.
         */
        // "--clearCache"
      ],
      "console": "integratedTerminal",
      "internalConsoleOptions": "openOnFirstSessionStart",
      "disableOptimisticBPs": true,
      /*
       * Uncomment the following to show debugging information from 'knex'. This command is
       * particularly handy for debugging the SQL queries submitted to the database.
       */
      "env": { "DEBUG": "knex:*" }
    }
  ]
}
