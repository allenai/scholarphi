[
  {
    "definition": "A statistical way of comparing two (or more) techniques, typically an incumbent against a new rival. A/B testing aims to determine not only which technique performs better but also to understand whether the difference is statistically significant. A/B testing usually considers only two techniques using one measurement, but it can be applied to any finite number of techniques and measures.",
    "name": "A/B testing",
    "orig_definition": "A statistical way of comparing two (or more) techniques, typically an incumbent against a new rival. A/B testing aims to determine not only which technique performs better but also to understand whether the difference is statistically significant. A/B testing usually considers only two techniques using one measurement, but it can be applied to any finite number of techniques and measures.",
    "orig_name": "A/B testing",
    "source": "google_ml"
  },
  {
    "definition": "The fraction of predictions that a classification model got right.",
    "name": "accuracy",
    "orig_definition": "The fraction of predictions that a classification model got right. In multi-class classification, accuracy is defined as follows:",
    "orig_name": "accuracy",
    "source": "google_ml"
  },
  {
    "definition": "In reinforcement learning, the mechanism by which the agent transitions between states of the environment. The agent chooses the action by using a policy.",
    "name": "action",
    "orig_definition": "In reinforcement learning, the mechanism by which the agent transitions between states of the environment. The agent chooses the action by using a policy.",
    "orig_name": "action",
    "source": "google_ml"
  },
  {
    "definition": "A function (for example, ReLU or sigmoid) that takes in the weighted sum of all of the inputs from the previous layer and then generates and passes an output value (typically nonlinear) to the next layer.",
    "name": "activation function",
    "orig_definition": "A function (for example, ReLU or sigmoid) that takes in the weighted sum of all of the inputs from the previous layer and then generates and passes an output value (typically nonlinear) to the next layer.",
    "orig_name": "activation function",
    "source": "google_ml"
  },
  {
    "definition": "A training approach in which the algorithm chooses some of the data it learns from. Active learning is particularly valuable when labeled examples are scarce or expensive to obtain. Instead of blindly seeking a diverse range of labeled examples, an active learning algorithm selectively seeks the particular range of examples it needs for learning.",
    "name": "active learning",
    "orig_definition": "A training approach in which the algorithm chooses some of the data it learns from. Active learning is particularly valuable when labeled examples are scarce or expensive to obtain. Instead of blindly seeking a diverse range of labeled examples, an active learning algorithm selectively seeks the particular range of examples it needs for learning.",
    "orig_name": "active learning",
    "source": "google_ml"
  },
  {
    "definition": "A sophisticated gradient descent algorithm that rescales the gradients of each parameter, effectively giving each parameter an independent learning rate. For a full explanation, see this paper.",
    "name": "AdaGrad",
    "orig_definition": "A sophisticated gradient descent algorithm that rescales the gradients of each parameter, effectively giving each parameter an independent learning rate. For a full explanation, see this paper.",
    "orig_name": "AdaGrad",
    "source": "google_ml"
  },
  {
    "definition": "In reinforcement learning, the entity that uses a policy to maximize expected return gained from transitioning between states of the  environment.",
    "name": "agent",
    "orig_definition": "In reinforcement learning, the entity that uses a policy to maximize expected return gained from transitioning between states of the  environment.",
    "orig_name": "agent",
    "source": "google_ml"
  },
  {
    "definition": "See hierarchical clustering.",
    "name": "agglomerative clustering",
    "orig_definition": "See hierarchical clustering.",
    "orig_name": "agglomerative clustering",
    "source": "google_ml"
  },
  {
    "definition": "Abbreviation for augmented reality.",
    "name": "AR",
    "orig_definition": "Abbreviation for augmented reality.",
    "orig_name": "AR",
    "source": "google_ml"
  },
  {
    "definition": "See PR AUC (Area under the PR Curve).",
    "name": "area under the PR curve",
    "orig_definition": "See PR AUC (Area under the PR Curve).",
    "orig_name": "area under the PR curve",
    "source": "google_ml"
  },
  {
    "definition": "See AUC (Area under the ROC curve).",
    "name": "area under the ROC curve",
    "orig_definition": "See AUC (Area under the ROC curve).",
    "orig_name": "area under the ROC curve",
    "source": "google_ml"
  },
  {
    "definition": "A non-human mechanism that demonstrates a broad range of problem solving, creativity, and adaptability. For example, a program demonstrating artificial general intelligence could translate text, compose symphonies, and excel at games that have not yet been invented.",
    "name": "artificial general intelligence",
    "orig_definition": "A non-human mechanism that demonstrates a broad range of problem solving, creativity, and adaptability. For example, a program demonstrating artificial general intelligence could translate text, compose symphonies, and excel at games that have not yet been invented.",
    "orig_name": "artificial general intelligence",
    "source": "google_ml"
  },
  {
    "definition": "A non-human program or model that can solve sophisticated tasks. For example, a program or model that translates text or a program or model that identifies diseases from radiologic images both exhibit artificial intelligence.",
    "name": "artificial intelligence",
    "orig_definition": "A non-human program or model that can solve sophisticated tasks. For example, a program or model that translates text or a program or model that identifies diseases from radiologic images both exhibit artificial intelligence.",
    "orig_name": "artificial intelligence",
    "source": "google_ml"
  },
  {
    "definition": "An input variable used in making predictions.",
    "name": "attribute",
    "orig_definition": "Synonym for feature. In fairness, attributes often refer to characteristics pertaining to individuals.",
    "orig_name": "attribute",
    "source": "google_ml"
  },
  {
    "definition": "An evaluation metric that considers all possible classification thresholds.",
    "name": "AUC",
    "orig_definition": "An evaluation metric that considers all possible classification thresholds.",
    "orig_name": "AUC (Area under the ROC Curve)",
    "source": "google_ml"
  },
  {
    "definition": "A technology that superimposes a computer-generated image on a user's view of the real world, thus providing a composite view.",
    "name": "augmented reality",
    "orig_definition": "A technology that superimposes a computer-generated image on a user's view of the real world, thus providing a composite view.",
    "orig_name": "augmented reality",
    "source": "google_ml"
  },
  {
    "definition": "When a human decision maker favors recommendations made by an automated decision-making system over information made without automation, even when the automated decision-making system makes errors.",
    "name": "automation bias",
    "orig_definition": "When a human decision maker favors recommendations made by an automated decision-making system over information made without automation, even when the automated decision-making system makes errors.",
    "orig_name": "automation bias",
    "source": "google_ml"
  },
  {
    "definition": "A metric for summarizing the performance of a ranked sequence of results. Average precision is calculated by taking the average of the precision values for each relevant result (each result in the ranked list where the recall increases relative to the previous result).",
    "name": "average precision",
    "orig_definition": "A metric for summarizing the performance of a ranked sequence of results. Average precision is calculated by taking the average of the precision values for each relevant result (each result in the ranked list where the recall increases relative to the previous result).",
    "orig_name": "average precision",
    "source": "google_ml"
  },
  {
    "definition": "The primary algorithm for performing gradient descent on neural networks. First, the output values of each node are calculated (and cached) in a forward pass. Then, the partial derivative of the error with respect to each parameter is calculated in a backward pass through the graph.",
    "name": "backpropagation",
    "orig_definition": "The primary algorithm for performing gradient descent on neural networks. First, the output values of each node are calculated (and cached) in a forward pass. Then, the partial derivative of the error with respect to each parameter is calculated in a backward pass through the graph.",
    "orig_name": "backpropagation",
    "source": "google_ml"
  },
  {
    "definition": "A representation of the words in a phrase or passage, irrespective of order.",
    "name": "bag of words",
    "orig_definition": "A representation of the words in a phrase or passage, irrespective of order. For example, bag of words represents the following three phrases identically:",
    "orig_name": "bag of words",
    "source": "google_ml"
  },
  {
    "definition": "A model used as a reference point for comparing how well another model (typically, a more complex one) is performing. For example, a logistic regression model might serve as a good baseline for a deep model.",
    "name": "baseline",
    "orig_definition": "A model used as a reference point for comparing how well another model (typically, a more complex one) is performing. For example, a logistic regression model might serve as a good baseline for a deep model.",
    "orig_name": "baseline",
    "source": "google_ml"
  },
  {
    "definition": "The set of examples used in one iteration (that is, one gradient update) of model training.",
    "name": "batch",
    "orig_definition": "The set of examples used in one iteration (that is, one gradient update) of model training.",
    "orig_name": "batch",
    "source": "google_ml"
  },
  {
    "definition": "Normalizing the input or output of the activation functions in a hidden layer.",
    "name": "batch normalization",
    "orig_definition": "Normalizing the input or output of the activation functions in a hidden layer. Batch normalization can provide the following benefits:",
    "orig_name": "batch normalization",
    "source": "google_ml"
  },
  {
    "definition": "The number of examples in a batch. For example, the batch size of SGD is 1, while the batch size of a mini-batch is usually between 10 and 1000. Batch size is usually fixed during training and inference; however, TensorFlow does permit dynamic batch sizes.",
    "name": "batch size",
    "orig_definition": "The number of examples in a batch. For example, the batch size of SGD is 1, while the batch size of a mini-batch is usually between 10 and 1000. Batch size is usually fixed during training and inference; however, TensorFlow does permit dynamic batch sizes.",
    "orig_name": "batch size",
    "source": "google_ml"
  },
  {
    "definition": "A probabilistic neural network that accounts for uncertainty in weights and outputs. A standard neural network regression model typically predicts a scalar value; for example, a model predicts a house price of 853,000. By contrast, a Bayesian neural network predicts a distribution of values; for example, a model predicts a house price of 853,000 with a standard deviation of 67,200. A Bayesian neural network relies on  Bayes' Theorem to calculate uncertainties in weights and predictions. A Bayesian neural network can be useful when it is important to quantify uncertainty, such as in models related to pharmaceuticals. Bayesian neural networks can also help prevent overfitting.",
    "name": "Bayesian neural network",
    "orig_definition": "A probabilistic neural network that accounts for uncertainty in weights and outputs. A standard neural network regression model typically predicts a scalar value; for example, a model predicts a house price of 853,000. By contrast, a Bayesian neural network predicts a distribution of values; for example, a model predicts a house price of 853,000 with a standard deviation of 67,200. A Bayesian neural network relies on  Bayes' Theorem to calculate uncertainties in weights and predictions. A Bayesian neural network can be useful when it is important to quantify uncertainty, such as in models related to pharmaceuticals. Bayesian neural networks can also help prevent overfitting.",
    "orig_name": "Bayesian neural network",
    "source": "google_ml"
  },
  {
    "definition": "In reinforcement learning, the following identity satisfied by the optimal Q-function:",
    "name": "Bellman equation",
    "orig_definition": "In reinforcement learning, the following identity satisfied by the optimal Q-function:",
    "orig_name": "Bellman equation",
    "source": "google_ml"
  },
  {
    "definition": "1. Stereotyping, prejudice or favoritism towards some things, people, or groups over others. These biases can affect collection and interpretation of data, the design of a system, and how users interact with a system.",
    "name": "bias",
    "orig_definition": "1. Stereotyping, prejudice or favoritism towards some things, people, or groups over others. These biases can affect collection and interpretation of data, the design of a system, and how users interact with a system.  Forms of this type of bias include:",
    "orig_name": "bias (ethics/fairness)",
    "source": "google_ml"
  },
  {
    "definition": "An intercept or offset from an origin. Bias (also known as the bias term) is referred to as b or w0 in machine learning models.",
    "name": "bias",
    "orig_definition": "An intercept or offset from an origin. Bias (also known as the bias term) is referred to as b or w0 in machine learning models.  For example, bias is the b in the following formula:",
    "orig_name": "bias (math)",
    "source": "google_ml"
  },
  {
    "definition": "An N-gram in which N=2.",
    "name": "bigram",
    "orig_definition": "An N-gram in which N=2.",
    "orig_name": "bigram",
    "source": "google_ml"
  },
  {
    "definition": "A type of classification task that outputs one of two mutually exclusive classes. For example, a machine learning model that evaluates email messages and outputs either \"spam\" or \"not spam\" is a binary classifier.",
    "name": "binary classification",
    "orig_definition": "A type of classification task that outputs one of two mutually exclusive classes. For example, a machine learning model that evaluates email messages and outputs either \"spam\" or \"not spam\" is a binary classifier.",
    "orig_name": "binary classification",
    "source": "google_ml"
  },
  {
    "definition": "See bucketing.",
    "name": "binning",
    "orig_definition": "See bucketing.",
    "orig_name": "binning",
    "source": "google_ml"
  },
  {
    "definition": "A machine learning technique that iteratively combines a set of simple and not very accurate classifiers (referred to as \"weak\" classifiers) into a classifier with high accuracy (a \"strong\" classifier) by upweighting the examples that the model is currently misclassfying.",
    "name": "boosting",
    "orig_definition": "A machine learning technique that iteratively combines a set of simple and not very accurate classifiers (referred to as \"weak\" classifiers) into a classifier with high accuracy (a \"strong\" classifier) by upweighting the examples that the model is currently misclassfying.",
    "orig_name": "boosting",
    "source": "google_ml"
  },
  {
    "definition": "In an image, the (x, y) coordinates of a rectangle around an area of interest, such as the dog in the image below.",
    "name": "bounding box",
    "orig_definition": "In an image, the (x, y) coordinates of a rectangle around an area of interest, such as the dog in the image below.",
    "orig_name": "bounding box",
    "source": "google_ml"
  },
  {
    "definition": "Expanding the shape of an operand in a matrix math operation to dimensions compatible for that operation. For instance, linear algebra requires that the two operands in a matrix addition operation must have the same dimensions. Consequently, you can't add a matrix of shape (m, n) to a vector of length n. Broadcasting enables this operation by virtually expanding the vector of length n to a matrix of shape (m,n) by replicating the same values down each column.",
    "name": "broadcasting",
    "orig_definition": "Expanding the shape of an operand in a matrix math operation to dimensions compatible for that operation. For instance, linear algebra requires that the two operands in a matrix addition operation must have the same dimensions. Consequently, you can't add a matrix of shape (m, n) to a vector of length n. Broadcasting enables this operation by virtually expanding the vector of length n to a matrix of shape (m,n) by replicating the same values down each column.",
    "orig_name": "broadcasting",
    "source": "google_ml"
  },
  {
    "definition": "Converting a (usually continuous) feature into multiple binary features called buckets or bins, typically based on value range. For example, instead of representing temperature as a single continuous floating-point feature, you could chop ranges of temperatures into discrete bins. Given temperature data sensitive to a tenth of a degree, all temperatures between 0.0 and 15.0 degrees could be put into one bin, 15.1 to 30.0 degrees could be a second bin, and 30.1 to 50.0 degrees could be a third bin.",
    "name": "bucketing",
    "orig_definition": "Converting a (usually continuous) feature into multiple binary features called buckets or bins, typically based on value range. For example, instead of representing temperature as a single continuous floating-point feature, you could chop ranges of temperatures into discrete bins. Given temperature data sensitive to a tenth of a degree, all temperatures between 0.0 and 15.0 degrees could be put into one bin, 15.1 to 30.0 degrees could be a second bin, and 30.1 to 50.0 degrees could be a third bin.",
    "orig_name": "bucketing",
    "source": "google_ml"
  },
  {
    "definition": "A post-prediction adjustment, typically to account for prediction bias. The adjusted predictions and probabilities should match the distribution of an observed set of labels.",
    "name": "calibration layer",
    "orig_definition": "A post-prediction adjustment, typically to account for prediction bias. The adjusted predictions and probabilities should match the distribution of an observed set of labels.",
    "orig_name": "calibration layer",
    "source": "google_ml"
  },
  {
    "definition": "The initial set of recommendations chosen by a recommendation system. For example, consider a bookstore that offers 100,000 titles. The candidate generation phase creates a much smaller list of suitable books for a particular user, say 500. But even 500 books is way too many to recommend to a user. Subsequent, more expensive, phases of a recommendation system (such as scoring and re-ranking) whittle down those 500 to a much smaller, more useful set of recommendations.",
    "name": "candidate generation",
    "orig_definition": "The initial set of recommendations chosen by a recommendation system. For example, consider a bookstore that offers 100,000 titles. The candidate generation phase creates a much smaller list of suitable books for a particular user, say 500. But even 500 books is way too many to recommend to a user. Subsequent, more expensive, phases of a recommendation system (such as scoring and re-ranking) whittle down those 500 to a much smaller, more useful set of recommendations.",
    "orig_name": "candidate generation",
    "source": "google_ml"
  },
  {
    "definition": "A training-time optimization in which a probability is calculated for all the positive labels, using, for example, softmax, but only for a random sample of negative labels. For example, if we have an example labeled beagle and dog candidate sampling computes the predicted probabilities and corresponding loss terms for the beagle and dog class outputs in addition to a random subset of the remaining classes (cat, lollipop, fence). The idea is that the negative classes can learn from less frequent negative reinforcement as long as positive classes always get proper positive reinforcement, and this is indeed observed empirically. The motivation for candidate sampling is a computational efficiency win from not computing predictions for all negatives.",
    "name": "candidate sampling",
    "orig_definition": "A training-time optimization in which a probability is calculated for all the positive labels, using, for example, softmax, but only for a random sample of negative labels. For example, if we have an example labeled beagle and dog candidate sampling computes the predicted probabilities and corresponding loss terms for the beagle and dog class outputs in addition to a random subset of the remaining classes (cat, lollipop, fence). The idea is that the negative classes can learn from less frequent negative reinforcement as long as positive classes always get proper positive reinforcement, and this is indeed observed empirically. The motivation for candidate sampling is a computational efficiency win from not computing predictions for all negatives.",
    "orig_name": "candidate sampling",
    "source": "google_ml"
  },
  {
    "definition": "Features having a discrete set of possible values. For example, consider a categorical feature named house style, which has a discrete set of three possible values: Tudor, ranch, colonial. By representing house style as categorical data, the model can learn the separate impacts of Tudor, ranch, and colonial on house price.",
    "name": "categorical data",
    "orig_definition": "Features having a discrete set of possible values. For example, consider a categorical feature named house style, which has a discrete set of three possible values: Tudor, ranch, colonial. By representing house style as categorical data, the model can learn the separate impacts of Tudor, ranch, and colonial on house price.",
    "orig_name": "categorical data",
    "source": "google_ml"
  },
  {
    "definition": "The center of a cluster as determined by a k-means or k-median algorithm. For instance, if k is 3, then the k-means or k-median algorithm finds 3 centroids.",
    "name": "centroid",
    "orig_definition": "The center of a cluster as determined by a k-means or k-median algorithm. For instance, if k is 3, then the k-means or k-median algorithm finds 3 centroids.",
    "orig_name": "centroid",
    "source": "google_ml"
  },
  {
    "definition": "A category of clustering algorithms that organizes data into nonhierarchical clusters. k-means is the most widely used centroid-based clustering algorithm.",
    "name": "centroid-based clustering",
    "orig_definition": "A category of clustering algorithms that organizes data into nonhierarchical clusters. k-means is the most widely used centroid-based clustering algorithm.",
    "orig_name": "centroid-based clustering",
    "source": "google_ml"
  },
  {
    "definition": "Data that captures the state of the variables of a model at a particular time. Checkpoints enable exporting model weights, as well as performing training across multiple sessions. Checkpoints also enable training to continue past errors (for example, job preemption). Note that the graph itself is not included in a checkpoint.",
    "name": "checkpoint",
    "orig_definition": "Data that captures the state of the variables of a model at a particular time. Checkpoints enable exporting model weights, as well as performing training across multiple sessions. Checkpoints also enable training to continue past errors (for example, job preemption). Note that the graph itself is not included in a checkpoint.",
    "orig_name": "checkpoint",
    "source": "google_ml"
  },
  {
    "definition": "One of a set of enumerated target values for a label. For example, in a binary classification model that detects spam, the two classes are spam and not spam. In a multi-class classification model that identifies dog breeds, the classes would be poodle, beagle, pug, and so on.",
    "name": "class",
    "orig_definition": "One of a set of enumerated target values for a label. For example, in a binary classification model that detects spam, the two classes are spam and not spam.  In a multi-class classification model that identifies dog breeds, the classes would be poodle, beagle, pug, and so on.",
    "orig_name": "class",
    "source": "google_ml"
  },
  {
    "definition": "A type of machine learning model for distinguishing among two or more discrete classes. For example, a natural language processing classification model could determine whether an input sentence was in French, Spanish, or Italian. Compare with regression model.",
    "name": "classification model",
    "orig_definition": "A type of machine learning model for distinguishing among two or more discrete classes. For example, a natural language processing classification model could determine whether an input sentence was in French, Spanish, or Italian. Compare with regression model.",
    "orig_name": "classification model",
    "source": "google_ml"
  },
  {
    "definition": "A scalar-value criterion that is applied to a model's predicted score in order to separate the positive class from the negative class. Used when mapping logistic regression results to binary classification. For example, consider a logistic regression model that determines the probability of a given email message being spam. If the classification threshold is 0.9, then logistic regression values above 0.9 are classified as spam and those below 0.9 are classified as not spam.",
    "name": "classification threshold",
    "orig_definition": "A scalar-value criterion that is applied to a model's predicted score in order to separate the positive class from the negative class.  Used when mapping logistic regression results to binary classification. For example, consider a logistic regression model that determines the probability of a given email message being spam. If the classification threshold is 0.9, then logistic regression values above 0.9 are classified as spam and those below 0.9 are classified as not spam.",
    "orig_name": "classification threshold",
    "source": "google_ml"
  },
  {
    "definition": "A binary classification problem in which the labels for the two classes have significantly different frequencies. For example, a disease dataset in which 0.0001 of examples have positive labels and 0.9999 have negative labels is a class-imbalanced problem, but a football game predictor in which 0.51 of examples label one team winning and 0.49 label the other team winning is not a class-imbalanced problem.",
    "name": "class-imbalanced dataset",
    "orig_definition": "A binary classification problem in which the labels for the two classes have significantly different frequencies.  For example, a disease dataset in which 0.0001 of examples have positive labels and 0.9999 have negative labels is a class-imbalanced problem, but a football game predictor in which 0.51 of examples label one team winning and 0.49 label the other team winning is not a class-imbalanced problem.",
    "orig_name": "class-imbalanced dataset",
    "source": "google_ml"
  },
  {
    "definition": "A technique for handling outliers. Specifically, reducing feature values that are greater than a set maximum value down to that maximum value. Also, increasing feature values that are less than a specific minimum value up to that minimum value.",
    "name": "clipping",
    "orig_definition": "A technique for handling outliers. Specifically, reducing feature values that are greater than a set maximum value down to that maximum value. Also, increasing feature values that are less than a specific minimum value up to that minimum value.",
    "orig_name": "clipping",
    "source": "google_ml"
  },
  {
    "definition": "A specialized hardware accelerator designed to speed up machine learning workloads on Google Cloud Platform.",
    "name": "Cloud TPU",
    "orig_definition": "A specialized hardware accelerator designed to speed up machine learning workloads on Google Cloud Platform.",
    "orig_name": "Cloud TPU",
    "source": "google_ml"
  },
  {
    "definition": "Grouping related examples, particularly during unsupervised learning. Once all the examples are grouped, a human can optionally supply meaning to each cluster.",
    "name": "clustering",
    "orig_definition": "Grouping related examples, particularly during unsupervised learning. Once all the examples are grouped, a human can optionally supply meaning to each cluster.",
    "orig_name": "clustering",
    "source": "google_ml"
  },
  {
    "definition": "When neurons predict patterns in training data by relying almost exclusively on outputs of specific other neurons instead of relying on the network's behavior as a whole. When the patterns that cause co-adaption are not present in validation data, then co-adaptation causes overfitting. Dropout regularization reduces co-adaptation because dropout ensures neurons cannot rely solely on specific other neurons.",
    "name": "co-adaptation",
    "orig_definition": "When neurons predict patterns in training data by relying almost exclusively on outputs of specific other neurons instead of relying on the network's behavior as a whole. When the patterns that cause co-adaption are not present in validation data, then co-adaptation causes overfitting. Dropout regularization reduces co-adaptation because dropout ensures neurons cannot rely solely on specific other neurons.",
    "orig_name": "co-adaptation",
    "source": "google_ml"
  },
  {
    "definition": "Making predictions about the interests of one user based on the interests of many other users. Collaborative filtering is often used in recommendation systems.",
    "name": "collaborative filtering",
    "orig_definition": "Making predictions about the interests of one user based on the interests of many other users.  Collaborative filtering is often used in recommendation systems.",
    "orig_name": "collaborative filtering",
    "source": "google_ml"
  },
  {
    "definition": "The tendency to search for, interpret, favor, and recall information in a way that confirms one's preexisting beliefs or hypotheses. Machine learning developers may inadvertently collect or label data in ways that influence an outcome supporting their existing beliefs. Confirmation bias is a form of implicit bias.",
    "name": "confirmation bias",
    "orig_definition": "The tendency to search for, interpret, favor, and recall information in a way that confirms one's preexisting beliefs or hypotheses. Machine learning developers may inadvertently collect or label data in ways that influence an outcome supporting their existing beliefs.  Confirmation bias is a form of implicit bias.",
    "orig_name": "confirmation bias",
    "source": "google_ml"
  },
  {
    "definition": "An NxN table that summarizes how successful a classification model's predictions were; that is, the correlation between the label and the model's classification. One axis of a confusion matrix is the label that the model predicted, and the other axis is the actual label. N represents the number of classes. In a binary classification problem, N=2.",
    "name": "confusion matrix",
    "orig_definition": "An NxN table that summarizes how successful a classification model's predictions were; that is, the correlation between the label and the model's classification. One axis of a confusion matrix is the label that the model predicted, and the other axis is the actual label. N represents the number of classes. In a binary classification problem, N=2. For example, here is a sample confusion matrix for a binary classification problem:",
    "orig_name": "confusion matrix",
    "source": "google_ml"
  },
  {
    "definition": "A floating-point feature with an infinite range of possible values. Contrast with discrete feature.",
    "name": "continuous feature",
    "orig_definition": "A floating-point feature with an infinite range of possible values. Contrast with discrete feature.",
    "orig_name": "continuous feature",
    "source": "google_ml"
  },
  {
    "definition": "Using a dataset not gathered scientifically in order to run quick experiments. Later on, it's essential to switch to a scientifically gathered dataset.",
    "name": "convenience sampling",
    "orig_definition": "Using a dataset not gathered scientifically in order to run quick experiments. Later on, it's essential to switch to a scientifically gathered dataset.",
    "orig_name": "convenience sampling",
    "source": "google_ml"
  },
  {
    "definition": "Informally, often refers to a state reached during training in which training loss and validation loss change very little or not at all with each iteration after a certain number of iterations. In other words, a model reaches convergence when additional training on the current data will not improve the model. In deep learning, loss values sometimes stay constant or nearly so for many iterations before finally descending, temporarily producing a false sense of convergence.",
    "name": "convergence",
    "orig_definition": "Informally, often refers to a state reached during training in which training loss and validation loss change very little or not at all with each iteration after a certain number of iterations. In other words, a model reaches convergence when additional training on the current data will not improve the model. In deep learning, loss values sometimes stay constant or nearly so for many iterations before finally descending, temporarily producing a false sense of convergence.",
    "orig_name": "convergence",
    "source": "google_ml"
  },
  {
    "definition": "A function in which the region above the graph of the function is a convex set. The prototypical convex function is shaped something like the letter U.",
    "name": "convex function",
    "orig_definition": "A function in which the region above the graph of the function is a convex set.  The prototypical convex function is shaped something like the letter U.  For example, the following are all convex functions:",
    "orig_name": "convex function",
    "source": "google_ml"
  },
  {
    "definition": "The process of using mathematical techniques such as gradient descent to find the minimum of a convex function. A great deal of research in machine learning has focused on formulating various problems as convex optimization problems and in solving those problems more efficiently.",
    "name": "convex optimization",
    "orig_definition": "The process of using mathematical techniques such as gradient descent to find the minimum of a convex function. A great deal of research in machine learning has focused on formulating various problems as convex optimization problems and in solving those problems more efficiently.",
    "orig_name": "convex optimization",
    "source": "google_ml"
  },
  {
    "definition": "A subset of Euclidean space such that a line drawn between any two points in the subset remains completely within the subset.",
    "name": "convex set",
    "orig_definition": "A subset of Euclidean space such that a line drawn between any two points in the subset remains completely within the subset.  For instance, the following two shapes are convex sets:",
    "orig_name": "convex set",
    "source": "google_ml"
  },
  {
    "definition": "In mathematics, casually speaking, a mixture of two functions. In machine learning, a convolution mixes the convolutional filter and the input matrix in order to train weights.",
    "name": "convolution",
    "orig_definition": "In mathematics, casually speaking, a mixture of two functions. In machine learning, a convolution mixes the convolutional filter and the input matrix in order to train weights.",
    "orig_name": "convolution",
    "source": "google_ml"
  },
  {
    "definition": "One of the two actors in a convolutional operation. (The other actor is a slice of an input matrix.) A convolutional filter is a matrix having the same rank as the input matrix, but a smaller shape. For example, given a 28x28 input matrix, the filter could be any 2D matrix smaller than 28x28.",
    "name": "convolutional filter",
    "orig_definition": "One of the two actors in a convolutional operation. (The other actor is a slice of an input matrix.) A convolutional filter is a matrix having the same rank as the input matrix, but a smaller shape. For example, given a 28x28 input matrix, the filter could be any 2D matrix smaller than 28x28.",
    "orig_name": "convolutional filter",
    "source": "google_ml"
  },
  {
    "definition": "A layer of a deep neural network in which a convolutional filter passes along an input matrix.",
    "name": "convolutional layer",
    "orig_definition": "A layer of a deep neural network in which a convolutional filter passes along an input matrix.  For example, consider the following 3x3 convolutional filter:",
    "orig_name": "convolutional layer",
    "source": "google_ml"
  },
  {
    "definition": "A neural network in which at least one layer is a convolutional layer.",
    "name": "convolutional neural network",
    "orig_definition": "A neural network in which at least one layer is a convolutional layer. A typical convolutional neural network consists of some combination of the following layers:",
    "orig_name": "convolutional neural network",
    "source": "google_ml"
  },
  {
    "definition": "The following two-step mathematical operation:",
    "name": "convolutional operation",
    "orig_definition": "The following two-step mathematical operation:",
    "orig_name": "convolutional operation",
    "source": "google_ml"
  },
  {
    "definition": "A measure of how far a model's predictions are from its label. Or, to phrase it more pessimistically, a measure of how bad the model is. To determine this value, a model must define a loss function. For example, linear regression models typically use mean squared error for a loss function, while logistic regression models use Log Loss.",
    "name": "cost",
    "orig_definition": "Synonym for loss.",
    "orig_name": "cost",
    "source": "google_ml"
  },
  {
    "definition": "See \"When Worlds Collide: Integrating Different Counterfactual Assumptions in Fairness\" for a more detailed discussion of counterfactual fairness.",
    "name": "counterfactual fairness",
    "orig_definition": "See \"When Worlds Collide: Integrating Different Counterfactual Assumptions in Fairness\" for a more detailed discussion of counterfactual fairness.",
    "orig_name": "counterfactual fairness",
    "source": "google_ml"
  },
  {
    "definition": "See selection bias.",
    "name": "coverage bias",
    "orig_definition": "See selection bias.",
    "orig_name": "coverage bias",
    "source": "google_ml"
  },
  {
    "definition": "A sentence or phrase with an ambiguous meaning. Crash blossoms present a significant problem in natural language understanding. For example, the headline Red Tape Holds Up Skyscraper is a crash blossom because an NLU model could interpret the headline literally or figuratively.",
    "name": "crash blossom",
    "orig_definition": "A sentence or phrase with an ambiguous meaning. Crash blossoms present a significant problem in natural language understanding. For example, the headline Red Tape Holds Up Skyscraper is a crash blossom because an NLU model could interpret the headline literally or figuratively.",
    "orig_name": "crash blossom",
    "source": "google_ml"
  },
  {
    "definition": "In Q-learning, a deep neural network that predicts Q-functions.",
    "name": "critic",
    "orig_definition": "Synonym for Deep Q-Network.",
    "orig_name": "critic",
    "source": "google_ml"
  },
  {
    "definition": "A generalization of Log Loss to multi-class classification problems. Cross-entropy quantifies the difference between two probability distributions.",
    "name": "cross-entropy",
    "orig_definition": "A generalization of Log Loss to multi-class classification problems. Cross-entropy quantifies the difference between two probability distributions.  See also perplexity.",
    "orig_name": "cross-entropy",
    "source": "google_ml"
  },
  {
    "definition": "A mechanism for estimating how well a model will generalize to new data by testing the model against one or more non-overlapping data subsets withheld from the training set.",
    "name": "cross-validation",
    "orig_definition": "A mechanism for estimating how well a model will generalize to new data by testing the model against one or more non-overlapping data subsets withheld from the training set.",
    "orig_name": "cross-validation",
    "source": "google_ml"
  },
  {
    "definition": "An Estimator that you write yourself by following these directions.",
    "name": "custom Estimator",
    "orig_definition": "An Estimator that you write yourself by following these directions.",
    "orig_name": "custom Estimator",
    "source": "google_ml"
  },
  {
    "definition": "Obtaining an understanding of data by considering samples, measurement, and visualization. Data analysis can be particularly useful when a dataset is first received, before one builds the first model. It is also crucial in understanding experiments and debugging problems with the system.",
    "name": "data analysis",
    "orig_definition": "Obtaining an understanding of data by considering samples, measurement, and visualization. Data analysis can be particularly useful when a dataset is first received, before one builds the first model. It is also crucial in understanding experiments and debugging problems with the system.",
    "orig_name": "data analysis",
    "source": "google_ml"
  },
  {
    "definition": "Artificially boosting the range and number of training examples by transforming existing examples to create additional examples. For example, suppose images are one of your features, but your dataset doesn't contain enough image examples for the model to learn useful associations. Ideally, you'd add enough labeled images to your dataset to enable your model to train properly. If that's not possible, data augmentation can rotate, stretch, and reflect each image to produce many variants of the original picture, possibly yielding enough labeled data to enable excellent training.",
    "name": "data augmentation",
    "orig_definition": "Artificially boosting the range and number of training examples by transforming existing examples to create additional examples. For example, suppose images are one of your features, but your dataset doesn't contain enough image examples for the model to learn useful associations. Ideally, you'd add enough labeled images to your dataset to enable your model to train properly. If that's not possible, data augmentation can rotate, stretch, and reflect each image to produce many variants of the original picture, possibly yielding enough labeled data to enable excellent training.",
    "orig_name": "data augmentation",
    "source": "google_ml"
  },
  {
    "definition": "A popular datatype for representing datasets in pandas. A DataFrame is analogous to a table. Each column of the DataFrame has a name (a header), and each row is identified by a number.",
    "name": "DataFrame",
    "orig_definition": "A popular datatype for representing datasets in pandas. A DataFrame is analogous to a table. Each column of the DataFrame has a name (a header), and each row is identified by a number.",
    "orig_name": "DataFrame",
    "source": "google_ml"
  },
  {
    "definition": "A collection of examples.",
    "name": "data set or dataset",
    "orig_definition": "A collection of examples.",
    "orig_name": "data set or dataset",
    "source": "google_ml"
  },
  {
    "definition": "A high-level TensorFlow API for reading data and transforming it into a form that a machine learning algorithm requires. A tf.data.Dataset object represents a sequence of elements, in which each element contains one or more Tensors. A tf.data.Iterator object provides access to the elements of a Dataset.",
    "name": "Dataset API",
    "orig_definition": "A high-level TensorFlow API for reading data and transforming it into a form that a machine learning algorithm requires. A tf.data.Dataset object represents a sequence of elements, in which each element contains one or more Tensors. A tf.data.Iterator object provides access to the elements of a Dataset.",
    "orig_name": "Dataset API (tf.data)",
    "source": "google_ml"
  },
  {
    "definition": "The separator between classes learned by a model in a binary class or multi-class classification problems.",
    "name": "decision boundary",
    "orig_definition": "The separator between classes learned by a model in a binary class or multi-class classification problems. For example, in the following image representing a binary classification problem, the decision boundary is the frontier between the orange class and the blue class:",
    "orig_name": "decision boundary",
    "source": "google_ml"
  },
  {
    "definition": "A scalar-value criterion that is applied to a model's predicted score in order to separate the positive class from the negative class. Used when mapping logistic regression results to binary classification. For example, consider a logistic regression model that determines the probability of a given email message being spam. If the classification threshold is 0.9, then logistic regression values above 0.9 are classified as spam and those below 0.9 are classified as not spam.",
    "name": "decision threshold",
    "orig_definition": "Synonym for classification threshold.",
    "orig_name": "decision threshold",
    "source": "google_ml"
  },
  {
    "definition": "A model represented as a sequence of branching statements. For example, the following over-simplified decision tree branches a few times to predict the price of a house (in thousands of USD). According to this decision tree, a house larger than 160 square meters, having more than three bedrooms, and built less than 10 years ago would have a predicted price of 510 thousand USD.",
    "name": "decision tree",
    "orig_definition": "A model represented as a sequence of branching statements. For example, the following over-simplified decision tree branches a few times to predict the price of a house (in thousands of USD).  According to this decision tree, a house larger than 160 square meters, having more than three bedrooms, and built less than 10 years ago would have a predicted price of 510 thousand USD.",
    "orig_name": "decision tree",
    "source": "google_ml"
  },
  {
    "definition": "A type of neural network containing multiple hidden layers.",
    "name": "deep model",
    "orig_definition": "A type of neural network containing multiple hidden layers.",
    "orig_name": "deep model",
    "source": "google_ml"
  },
  {
    "definition": "A type of neural network containing multiple hidden layers.",
    "name": "deep neural network",
    "orig_definition": "Synonym for deep model.",
    "orig_name": "deep neural network",
    "source": "google_ml"
  },
  {
    "definition": "In Q-learning, a deep neural network that predicts Q-functions.",
    "name": "Deep Q-Network",
    "orig_definition": "In Q-learning, a deep neural network that predicts Q-functions.",
    "orig_name": "Deep Q-Network (DQN)",
    "source": "google_ml"
  },
  {
    "definition": "A fairness metric that is satisfied if the results of a model's classification are not dependent on a given sensitive attribute.",
    "name": "demographic parity",
    "orig_definition": "A fairness metric that is satisfied if the results of a model's classification are not dependent on a given sensitive attribute.",
    "orig_name": "demographic parity",
    "source": "google_ml"
  },
  {
    "definition": "A feature in which most values are non-zero, typically a Tensor of floating-point values. Contrast with sparse feature.",
    "name": "dense feature",
    "orig_definition": "A feature in which most values are non-zero, typically a Tensor of floating-point values. Contrast with sparse feature.",
    "orig_name": "dense feature",
    "source": "google_ml"
  },
  {
    "definition": "A hidden layer in which each node is connected to every node in the subsequent hidden layer.",
    "name": "dense layer",
    "orig_definition": "Synonym for fully connected layer.",
    "orig_name": "dense layer",
    "source": "google_ml"
  },
  {
    "definition": "The number of layers (including any embedding layers) in a neural network that learn weights. For example, a neural network with 5 hidden layers and 1 output layer has a depth of 6.",
    "name": "depth",
    "orig_definition": "The number of layers (including any embedding layers) in a neural network that learn weights. For example, a neural network with 5 hidden layers and 1 output layer has a depth of 6.",
    "orig_name": "depth",
    "source": "google_ml"
  },
  {
    "definition": "A convolutional neural network architecture based on Inception, but where Inception modules are replaced with depthwise separable convolutions. Also known as Xception.",
    "name": "depthwise separable convolutional neural network",
    "orig_definition": "A convolutional neural network architecture based on Inception, but where Inception modules are replaced with depthwise separable convolutions.  Also known as Xception.",
    "orig_name": "depthwise separable convolutional neural network (sepCNN)",
    "source": "google_ml"
  },
  {
    "definition": "A category of hardware that can run a TensorFlow session, including CPUs, GPUs, and TPUs.",
    "name": "device",
    "orig_definition": "A category of hardware that can run a TensorFlow session, including CPUs, GPUs, and TPUs.",
    "orig_name": "device",
    "source": "google_ml"
  },
  {
    "definition": "Decreasing the number of dimensions used to represent a particular feature in a feature vector, typically by converting to an embedding.",
    "name": "dimension reduction",
    "orig_definition": "Decreasing the number of dimensions used to represent a particular feature in a feature vector, typically by converting to an embedding.",
    "orig_name": "dimension reduction",
    "source": "google_ml"
  },
  {
    "definition": "Overloaded term having any of the following definitions:",
    "name": "dimensions",
    "orig_definition": "Overloaded term having any of the following definitions:",
    "orig_name": "dimensions",
    "source": "google_ml"
  },
  {
    "definition": "A feature with a finite set of possible values. For example, a feature whose values may only be animal, vegetable, or mineral is a discrete (or categorical) feature. Contrast with continuous feature.",
    "name": "discrete feature",
    "orig_definition": "A feature with a finite set of possible values. For example, a feature whose values may only be animal, vegetable, or mineral is a discrete (or categorical) feature. Contrast with continuous feature.",
    "orig_name": "discrete feature",
    "source": "google_ml"
  },
  {
    "definition": "A model that predicts labels from a set of one or more features.",
    "name": "discriminative model",
    "orig_definition": "A model that predicts labels from a set of one or more features. More formally, discriminative models define the conditional probability of an output given the features and weights; that is:",
    "orig_name": "discriminative model",
    "source": "google_ml"
  },
  {
    "definition": "A system that determines whether examples are real or fake.",
    "name": "discriminator",
    "orig_definition": "A system that determines whether examples are real or fake.",
    "orig_name": "discriminator",
    "source": "google_ml"
  },
  {
    "definition": "Making decisions about people that impact different population subgroups disproportionately. This usually refers to situations where an algorithmic decision-making process harms or benefits some subgroups more than others.",
    "name": "disparate impact",
    "orig_definition": "Making decisions about people that impact different population subgroups disproportionately. This usually refers to situations where an algorithmic decision-making process harms or benefits some subgroups more than others.",
    "orig_name": "disparate impact",
    "source": "google_ml"
  },
  {
    "definition": "Factoring subjects' sensitive attributes into an algorithmic decision-making process such that different subgroups of people are treated differently.",
    "name": "disparate treatment",
    "orig_definition": "Factoring subjects' sensitive attributes into an algorithmic decision-making process such that different subgroups of people are treated differently.",
    "orig_name": "disparate treatment",
    "source": "google_ml"
  },
  {
    "definition": "See hierarchical clustering.",
    "name": "divisive clustering",
    "orig_definition": "See hierarchical clustering.",
    "orig_name": "divisive clustering",
    "source": "google_ml"
  },
  {
    "definition": "Overloaded term that can mean either of the following:",
    "name": "downsampling",
    "orig_definition": "Overloaded term that can mean either of the following:",
    "orig_name": "downsampling",
    "source": "google_ml"
  },
  {
    "definition": "Abbreviation for Deep Q-Network.",
    "name": "DQN",
    "orig_definition": "Abbreviation for Deep Q-Network.",
    "orig_name": "DQN",
    "source": "google_ml"
  },
  {
    "definition": "A form of regularization useful in training neural networks. Dropout regularization works by removing a random selection of a fixed number of the units in a network layer for a single gradient step. The more units dropped out, the stronger the regularization. This is analogous to training the network to emulate an exponentially large ensemble of smaller networks. For full details, see Dropout: A Simple Way to Prevent Neural Networks from Overfitting.",
    "name": "dropout regularization",
    "orig_definition": "A form of regularization useful in training neural networks. Dropout regularization works by removing a random selection of a fixed number of the units in a network layer for a single gradient step. The more units dropped out, the stronger the regularization. This is analogous to training the network to emulate an exponentially large ensemble of smaller networks. For full details, see Dropout: A Simple Way to Prevent Neural Networks from Overfitting.",
    "orig_name": "dropout regularization",
    "source": "google_ml"
  },
  {
    "definition": "A model that is trained online in a continuously updating fashion. That is, data is continuously entering the model.",
    "name": "dynamic model",
    "orig_definition": "A model that is trained online in a continuously updating fashion.  That is, data is continuously entering the model.",
    "orig_name": "dynamic model",
    "source": "google_ml"
  },
  {
    "definition": "A TensorFlow programming environment in which operations run immediately. By contrast, operations called in graph execution don't run until they are explicitly evaluated. Eager execution is an imperative interface, much like the code in most programming languages. Eager execution programs are generally far easier to debug than graph execution programs.",
    "name": "eager execution",
    "orig_definition": "A TensorFlow programming environment in which operations run immediately. By contrast, operations called in graph execution don't run until they are explicitly evaluated. Eager execution is an imperative interface, much like the code in most programming languages. Eager execution programs are generally far easier to debug than graph execution programs.",
    "orig_name": "eager execution",
    "source": "google_ml"
  },
  {
    "definition": "A method for regularization that involves ending model training before training loss finishes decreasing. In early stopping, you end model training when the loss on a validation dataset starts to increase, that is, when generalization performance worsens.",
    "name": "early stopping",
    "orig_definition": "A method for regularization that involves ending model training before training loss finishes decreasing. In early stopping, you end model training when the loss on a validation dataset starts to increase, that is, when generalization performance worsens.",
    "orig_name": "early stopping",
    "source": "google_ml"
  },
  {
    "definition": "A categorical feature represented as a continuous-valued feature. Typically, an embedding is a translation of a high-dimensional vector into a low-dimensional space.",
    "name": "embeddings",
    "orig_definition": "A categorical feature represented as a continuous-valued feature. Typically, an embedding is a translation of a high-dimensional vector into a low-dimensional space. For example, you can represent the words in an English sentence in either of the following two ways:",
    "orig_name": "embeddings",
    "source": "google_ml"
  },
  {
    "definition": "The d-dimensional vector space that features from a higher-dimensional vector space are mapped to. Ideally, the embedding space contains a structure that yields meaningful mathematical results; for example, in an ideal embedding space, addition and subtraction of embeddings can solve word analogy tasks.",
    "name": "embedding space",
    "orig_definition": "The d-dimensional vector space that features from a higher-dimensional vector space are mapped to. Ideally, the embedding space contains a structure that yields meaningful mathematical results; for example, in an ideal embedding space, addition and subtraction of embeddings can solve word analogy tasks.",
    "orig_name": "embedding space",
    "source": "google_ml"
  },
  {
    "definition": "Choosing the function that minimizes loss on the training set. Contrast with structural risk minimization.",
    "name": "empirical risk minimization",
    "orig_definition": "Choosing the function that minimizes loss on the training set. Contrast with structural risk minimization.",
    "orig_name": "empirical risk minimization (ERM)",
    "source": "google_ml"
  },
  {
    "definition": "A merger of the predictions of multiple models.",
    "name": "ensemble",
    "orig_definition": "A merger of the predictions of multiple models. You can create an ensemble via one or more of the following:",
    "orig_name": "ensemble",
    "source": "google_ml"
  },
  {
    "definition": "In reinforcement learning, the world that contains the agent and allows the agent to observe that world's state. For example, the represented world can be a game like chess, or a physical world like a maze. When the agent applies an action to the environment, then the environment transitions between states.",
    "name": "environment",
    "orig_definition": "In reinforcement learning, the world that contains the agent and allows the agent to observe that world's state. For example, the represented world can be a game like chess, or a physical world like a maze. When the agent applies an action to the environment, then the environment transitions between states.",
    "orig_name": "environment",
    "source": "google_ml"
  },
  {
    "definition": "In reinforcement learning, each of the repeated attempts by the agent to learn an environment.",
    "name": "episode",
    "orig_definition": "In reinforcement learning, each of the repeated attempts by the agent to learn an environment.",
    "orig_name": "episode",
    "source": "google_ml"
  },
  {
    "definition": "A full training pass over the entire dataset such that each example has been seen once. Thus, an epoch represents N/batch size training iterations, where N is the total number of examples.",
    "name": "epoch",
    "orig_definition": "A full training pass over the entire dataset such that each example has been seen once.  Thus, an epoch represents N/batch size training iterations, where N is the total number of examples.",
    "orig_name": "epoch",
    "source": "google_ml"
  },
  {
    "definition": "In reinforcement learning, a policy that either follows a random policy with epsilon probability or a greedy policy otherwise. For example, if epsilon is 0.9, then the policy follows a random policy 90% of the time and a greedy policy 10% of the time.",
    "name": "epsilon greedy policy",
    "orig_definition": "In reinforcement learning, a policy that either follows a random policy with epsilon probability or a greedy policy otherwise. For example, if epsilon is 0.9, then the policy follows a random policy 90% of the time and a greedy policy 10% of the time.",
    "orig_name": "epsilon greedy policy",
    "source": "google_ml"
  },
  {
    "definition": "For example, suppose Glubbdubdrib University admits both Lilliputians and Brobdingnagians to a rigorous mathematics program. Lilliputians\u2019 secondary schools offer a robust curriculum of math classes, and the vast majority of students are qualified for the university program. Brobdingnagians\u2019 secondary schools don\u2019t offer math classes at all, and as a result, far fewer of their students are qualified. Equality of opportunity is satisfied for the preferred label of \"admitted\" with respect to nationality (Lilliputian or Brobdingnagian) if qualified students are equally likely to be admitted irrespective of whether they're a Lilliputian or a Brobdingnagian.",
    "name": "equality of opportunity",
    "orig_definition": "For example, suppose Glubbdubdrib University admits both Lilliputians and Brobdingnagians to a rigorous mathematics program. Lilliputians\u2019 secondary schools offer a robust curriculum of math classes, and the vast majority of students are qualified for the university program. Brobdingnagians\u2019 secondary schools don\u2019t offer math classes at all, and as a result, far fewer of their students are qualified. Equality of opportunity is satisfied for the preferred label of \"admitted\" with respect to nationality (Lilliputian or Brobdingnagian) if qualified students are equally likely to be admitted irrespective of whether they're a Lilliputian or a Brobdingnagian.",
    "orig_name": "equality of opportunity",
    "source": "google_ml"
  },
  {
    "definition": "For example, suppose Glubbdubdrib University admits both Lilliputians and Brobdingnagians to a rigorous mathematics program. Lilliputians' secondary schools offer a robust curriculum of math classes, and the vast majority of students are qualified for the university program. Brobdingnagians' secondary schools don\u2019t offer math classes at all, and as a result, far fewer of their students are qualified. Equalized odds is satisfied provided that no matter whether an applicant is  a Lilliputian or a Brobdingnagian, if they are qualified, they are equally as likely to get admitted to the program, and if they are not qualified, they are equally as likely to get rejected.",
    "name": "equalized odds",
    "orig_definition": "For example, suppose Glubbdubdrib University admits both Lilliputians and Brobdingnagians to a rigorous mathematics program. Lilliputians' secondary schools offer a robust curriculum of math classes, and the vast majority of students are qualified for the university program. Brobdingnagians' secondary schools don\u2019t offer math classes at all, and as a result, far fewer of their students are qualified.  Equalized odds is satisfied provided that no matter whether an applicant is  a Lilliputian or a Brobdingnagian, if they are qualified, they are equally as likely to get admitted to the program, and if they are not qualified, they are equally as likely to get rejected.",
    "orig_name": "equalized odds",
    "source": "google_ml"
  },
  {
    "definition": "An instance of the tf.Estimator class, which encapsulates logic that builds a TensorFlow graph and runs a TensorFlow session. You may create your own custom Estimators (as described here) or instantiate premade Estimators created by others.",
    "name": "Estimator",
    "orig_definition": "An instance of the tf.Estimator class, which encapsulates logic that builds a TensorFlow graph and runs a TensorFlow session. You may create your own custom Estimators (as described here) or instantiate premade Estimators created by others.",
    "orig_name": "Estimator",
    "source": "google_ml"
  },
  {
    "definition": "One row of a dataset. An example contains one or more features and possibly a label.",
    "name": "example",
    "orig_definition": "One row of a dataset. An example contains one or more features and possibly a label. See also labeled example and unlabeled example.",
    "orig_name": "example",
    "source": "google_ml"
  },
  {
    "definition": "In reinforcement learning, a DQN technique used to reduce temporal correlations in training data. The agent stores state transitions in a replay buffer, and then samples transitions from the replay buffer to create training data.",
    "name": "experience replay",
    "orig_definition": "In reinforcement learning, a DQN technique used to reduce temporal correlations in training data. The agent stores state transitions in a replay buffer, and then samples transitions from the replay buffer to create training data.",
    "orig_name": "experience replay",
    "source": "google_ml"
  },
  {
    "definition": "See confirmation bias.",
    "name": "experimenter's bias",
    "orig_definition": "See confirmation bias.",
    "orig_name": "experimenter's bias",
    "source": "google_ml"
  },
  {
    "definition": "The tendency for gradients in a deep neural networks (especially recurrent neural networks) to become surprisingly steep (high). Steep gradients result in very large updates to the weights of each node in a deep neural network.",
    "name": "exploding gradient problem",
    "orig_definition": "The tendency for gradients in a deep neural networks (especially recurrent neural networks) to become surprisingly steep (high). Steep gradients result in very large updates to the weights of each node in a deep neural network.",
    "orig_name": "exploding gradient problem",
    "source": "google_ml"
  },
  {
    "definition": "fairness metric  #fairness",
    "name": "fairness constraint",
    "orig_definition": "fairness metric  #fairness",
    "orig_name": "fairness constraint",
    "source": "google_ml"
  },
  {
    "definition": "A mathematical definition of \u201cfairness\u201d that is measurable.",
    "name": "fairness metric",
    "orig_definition": "A mathematical definition of \u201cfairness\u201d that is measurable. Some commonly used fairness metrics include:",
    "orig_name": "fairness metric",
    "source": "google_ml"
  },
  {
    "definition": "An example in which the model mistakenly predicted the negative class. For example, the model inferred that a particular email message was not spam (the negative class), but that email message actually was spam.",
    "name": "false negative",
    "orig_definition": "An example in which the model mistakenly predicted the negative class. For example, the model inferred that a particular email message was not spam (the negative class), but that email message actually was spam.",
    "orig_name": "false negative (FN)",
    "source": "google_ml"
  },
  {
    "definition": "An example in which the model mistakenly predicted the positive class. For example, the model inferred that a particular email message was spam (the positive class), but that email message was actually not spam.",
    "name": "false positive",
    "orig_definition": "An example in which the model mistakenly predicted the positive class. For example, the model inferred that a particular email message was spam (the positive class), but that email message was actually not spam.",
    "orig_name": "false positive (FP)",
    "source": "google_ml"
  },
  {
    "definition": "The x-axis in an ROC curve.",
    "name": "false positive rate",
    "orig_definition": "The x-axis in an ROC curve. The false positive rate is defined as follows:",
    "orig_name": "false positive rate (FPR)",
    "source": "google_ml"
  },
  {
    "definition": "An input variable used in making predictions.",
    "name": "feature",
    "orig_definition": "An input variable used in making predictions.",
    "orig_name": "feature",
    "source": "google_ml"
  },
  {
    "definition": "A function that specifies how a model should interpret a particular feature. A list that collects the output returned by calls to such functions is a required parameter to all Estimators constructors.",
    "name": "Feature column",
    "orig_definition": "A function that specifies how a model should interpret a particular feature. A list that collects the output returned by calls to such functions is a required parameter to all Estimators constructors.",
    "orig_name": "Feature column (tf.feature_column)",
    "source": "google_ml"
  },
  {
    "definition": "A synthetic feature formed by crossing (taking a Cartesian product of) individual binary features obtained from categorical data or from continuous features via bucketing. Feature crosses help represent nonlinear relationships.",
    "name": "feature cross",
    "orig_definition": "A synthetic feature formed by crossing (taking a Cartesian product of) individual binary features obtained from categorical data or from continuous features via bucketing. Feature crosses help represent nonlinear relationships.",
    "orig_name": "feature cross",
    "source": "google_ml"
  },
  {
    "definition": "The process of determining which features might be useful in training a model, and then converting raw data from log files and other sources into said features. In TensorFlow, feature engineering often means converting raw log file entries to tf.Example protocol buffers.",
    "name": "feature engineering",
    "orig_definition": "The process of determining which features might be useful in training a model, and then converting raw data from log files and other sources into said features. In TensorFlow, feature engineering often means converting raw log file entries to tf.Example protocol buffers.  See also tf.Transform.",
    "orig_name": "feature engineering",
    "source": "google_ml"
  },
  {
    "definition": "Overloaded term having either of the following definitions:",
    "name": "feature extraction",
    "orig_definition": "Overloaded term having either of the following definitions:",
    "orig_name": "feature extraction",
    "source": "google_ml"
  },
  {
    "definition": "The group of features your machine learning model trains on. For example, postal code, property size, and property condition might comprise a simple feature set for a model that predicts housing prices.",
    "name": "feature set",
    "orig_definition": "The group of features your machine learning model trains on. For example, postal code, property size, and property condition might comprise a simple feature set for a model that predicts housing prices.",
    "orig_name": "feature set",
    "source": "google_ml"
  },
  {
    "definition": "Describes the information required to extract features data from the tf.Example protocol buffer.",
    "name": "feature spec",
    "orig_definition": "Describes the information required to extract features data from the tf.Example protocol buffer. Because the tf.Example protocol buffer is just a container for data, you must specify the following:",
    "orig_name": "feature spec",
    "source": "google_ml"
  },
  {
    "definition": "The list of feature values representing an example passed into a model.",
    "name": "feature vector",
    "orig_definition": "The list of feature values representing an example passed into a model.",
    "orig_name": "feature vector",
    "source": "google_ml"
  },
  {
    "definition": "A distributed machine learning approach that trains machine learning models using decentralized examples residing on devices such as smartphones. In federated learning, a subset of devices downloads the current model from a central coordinating server. The devices use the examples stored on the devices to make improvements to the model. The devices then upload the model improvements (but not the training examples) to the coordinating server, where they are aggregated with other updates to yield an improved global model. After the aggregation, the model updates computed by devices are no longer needed, and can be discarded.",
    "name": "federated learning",
    "orig_definition": "A distributed machine learning approach that trains machine learning models using decentralized examples residing on devices such as smartphones. In federated learning, a subset of devices downloads the current model from a central coordinating server. The devices use the examples stored on the devices to make improvements to the model. The devices then upload the model improvements (but not the training examples) to the coordinating server, where they are aggregated with other updates to yield an improved global model. After the aggregation, the model updates computed by devices are no longer needed, and can be discarded.",
    "orig_name": "federated learning",
    "source": "google_ml"
  },
  {
    "definition": "In machine learning, a situation in which a model's predictions influence the training data for the same model or another model. For example, a model that recommends movies will influence the movies that people see, which will then influence subsequent movie recommendation models.",
    "name": "feedback loop",
    "orig_definition": "In machine learning, a situation in which a model's predictions influence the training data for the same model or another model. For example, a model that recommends movies will influence the movies that people see, which will then influence subsequent movie recommendation models.",
    "orig_name": "feedback loop",
    "source": "google_ml"
  },
  {
    "definition": "A neural network without cyclic or recursive connections. For example, traditional deep neural networks are feedforward neural networks. Contrast with recurrent neural networks, which are cyclic.",
    "name": "feedforward neural network",
    "orig_definition": "A neural network without cyclic or recursive connections. For example, traditional deep neural networks are feedforward neural networks. Contrast with recurrent neural networks, which are cyclic.",
    "orig_name": "feedforward neural network (FFN)",
    "source": "google_ml"
  },
  {
    "definition": "A machine learning approach, often used for object classification, designed to learn effective classifiers from only a small number of training examples.",
    "name": "few-shot learning",
    "orig_definition": "A machine learning approach, often used for object classification, designed to learn effective classifiers from only a small number of training examples.",
    "orig_name": "few-shot learning",
    "source": "google_ml"
  },
  {
    "definition": "Perform a secondary optimization to adjust the parameters of an already trained model to fit a new problem. Fine tuning often refers to refitting the weights of a trained unsupervised model to a supervised model.",
    "name": "fine tuning",
    "orig_definition": "Perform a secondary optimization to adjust the parameters of an already trained model to fit a new problem. Fine tuning often refers to refitting the weights of a trained unsupervised model to a supervised model.",
    "orig_name": "fine tuning",
    "source": "google_ml"
  },
  {
    "definition": "The portion of a Long Short-Term Memory cell that regulates the flow of information through the cell. Forget gates maintain context by deciding which information to discard from the cell state.",
    "name": "forget gate",
    "orig_definition": "The portion of a Long Short-Term Memory cell that regulates the flow of information through the cell. Forget gates maintain context by deciding which information to discard from the cell state.",
    "orig_name": "forget gate",
    "source": "google_ml"
  },
  {
    "definition": "Contrast with candidate sampling.",
    "name": "full softmax",
    "orig_definition": "See softmax. Contrast with candidate sampling.",
    "orig_name": "full softmax",
    "source": "google_ml"
  },
  {
    "definition": "A hidden layer in which each node is connected to every node in the subsequent hidden layer.",
    "name": "fully connected layer",
    "orig_definition": "A hidden layer in which each node is connected to every node in the subsequent hidden layer.",
    "orig_name": "fully connected layer",
    "source": "google_ml"
  },
  {
    "definition": "Abbreviation for generative adversarial network.",
    "name": "GAN",
    "orig_definition": "Abbreviation for generative adversarial network.",
    "orig_name": "GAN",
    "source": "google_ml"
  },
  {
    "definition": "Refers to your model's ability to make correct predictions on new, previously unseen data as opposed to the data used to train the model.",
    "name": "generalization",
    "orig_definition": "Refers to your model's ability to make correct predictions on new, previously unseen data as opposed to the data used to train the model.",
    "orig_name": "generalization",
    "source": "google_ml"
  },
  {
    "definition": "A loss curve showing both the training set and the validation set. A generalization curve can help you detect possible overfitting. For example, the following generalization curve suggests overfitting because loss for the validation set ultimately becomes significantly higher than for the training set.",
    "name": "generalization curve",
    "orig_definition": "A loss curve showing both the training set and the validation set. A generalization curve can help you detect possible overfitting.  For example, the following generalization curve suggests overfitting because loss for the validation set ultimately becomes significantly higher than for the training set.",
    "orig_name": "generalization curve",
    "source": "google_ml"
  },
  {
    "definition": "A generalization of least squares regression models, which are based on Gaussian noise, to other types of models based on other types of noise, such as Poisson noise or categorical noise.",
    "name": "generalized linear model",
    "orig_definition": "A generalization of least squares regression models, which are based on Gaussian noise, to other types of models based on other types of noise, such as Poisson noise or categorical noise. Examples of generalized linear models include:",
    "orig_name": "generalized linear model",
    "source": "google_ml"
  },
  {
    "definition": "A system to create new data in which a generator creates data and a discriminator determines whether that created data is valid or invalid.",
    "name": "generative adversarial network",
    "orig_definition": "A system to create new data in which a generator creates data and a discriminator determines whether that created data is valid or invalid.",
    "orig_name": "generative adversarial network (GAN)",
    "source": "google_ml"
  },
  {
    "definition": "Practically speaking, a model that does either of the following:",
    "name": "generative model",
    "orig_definition": "Practically speaking, a model that does either of the following:",
    "orig_name": "generative model",
    "source": "google_ml"
  },
  {
    "definition": "The subsystem within a generative adversarial network that creates new examples.",
    "name": "generator",
    "orig_definition": "The subsystem within a generative adversarial network that creates new examples.",
    "orig_name": "generator",
    "source": "google_ml"
  },
  {
    "definition": "The vector of partial derivatives with respect to all of the independent variables. In machine learning, the gradient is the vector of partial derivatives of the model function. The gradient points in the direction of steepest ascent.",
    "name": "gradient",
    "orig_definition": "The vector of partial derivatives with respect to all of the independent variables.  In machine learning, the gradient is the vector of partial derivatives of the model function.  The gradient points in the direction of steepest ascent.",
    "orig_name": "gradient",
    "source": "google_ml"
  },
  {
    "definition": "A commonly used mechanism to mitigate the exploding gradient problem by artificially limiting (clipping) the maximum value of gradients when using gradient descent to train a model.",
    "name": "gradient clipping",
    "orig_definition": "A commonly used mechanism to mitigate the exploding gradient problem by artificially limiting (clipping) the maximum value of gradients when using gradient descent to train a model.",
    "orig_name": "gradient clipping",
    "source": "google_ml"
  },
  {
    "definition": "A technique to minimize loss by computing the gradients of loss with respect to the model's parameters, conditioned on training data. Informally, gradient descent iteratively adjusts parameters, gradually finding the best combination of weights and bias to minimize loss.",
    "name": "gradient descent",
    "orig_definition": "A technique to minimize loss by computing the gradients of loss with respect to the model's parameters, conditioned on training data. Informally, gradient descent iteratively adjusts parameters, gradually finding the best combination of weights and bias to minimize loss.",
    "orig_name": "gradient descent",
    "source": "google_ml"
  },
  {
    "definition": "In TensorFlow, a computation specification. Nodes in the graph represent operations. Edges are directed and represent passing the result of an operation (a Tensor) as an operand to another operation. Use TensorBoard to visualize a graph.",
    "name": "graph",
    "orig_definition": "In TensorFlow, a computation specification. Nodes in the graph represent operations. Edges are directed and represent passing the result of an operation (a Tensor) as an operand to another operation. Use TensorBoard to visualize a graph.",
    "orig_name": "graph",
    "source": "google_ml"
  },
  {
    "definition": "A TensorFlow programming environment in which the program first constructs a graph and then executes all or part of that graph. Graph execution is the default execution mode in TensorFlow 1.x.",
    "name": "graph execution",
    "orig_definition": "A TensorFlow programming environment in which the program first constructs a graph and then executes all or part of that graph. Graph execution is the default execution mode in TensorFlow 1.x.",
    "orig_name": "graph execution",
    "source": "google_ml"
  },
  {
    "definition": "In reinforcement learning, a policy that always chooses the action with the highest expected return.",
    "name": "greedy policy",
    "orig_definition": "In reinforcement learning, a policy that always chooses the action with the highest expected return.",
    "orig_name": "greedy policy",
    "source": "google_ml"
  },
  {
    "definition": "The correct answer. Reality. Since reality is often subjective, expert raters typically are the proxy for ground truth.",
    "name": "ground truth",
    "orig_definition": "The correct answer. Reality. Since reality is often subjective, expert raters typically are the proxy for ground truth.",
    "orig_name": "ground truth",
    "source": "google_ml"
  },
  {
    "definition": "Assuming that what is true for an individual is also true for everyone in that group. The effects of group attribution bias can be exacerbated if a convenience sampling is used for data collection. In a non-representative sample, attributions may be made that do not reflect reality.",
    "name": "group attribution bias",
    "orig_definition": "Assuming that what is true for an individual is also true for everyone in that group. The effects of group attribution bias can be exacerbated if a convenience sampling is used for data collection. In a non-representative sample, attributions may be made that do not reflect reality.",
    "orig_name": "group attribution bias",
    "source": "google_ml"
  },
  {
    "definition": "In machine learning, a mechanism for bucketing categorical data, particularly when the number of categories is large, but the number of categories actually appearing in the dataset is comparatively small.",
    "name": "hashing",
    "orig_definition": "In machine learning, a mechanism for bucketing categorical data, particularly when the number of categories is large, but the number of categories actually appearing in the dataset is comparatively small.",
    "orig_name": "hashing",
    "source": "google_ml"
  },
  {
    "definition": "A quick solution to a problem, which may or may not be the best solution. For example, \"With a heuristic, we achieved 86% accuracy. When we switched to a deep neural network, accuracy went up to 98%.\"",
    "name": "heuristic",
    "orig_definition": "A quick solution to a problem, which may or may not be the best solution. For example, \"With a heuristic, we achieved 86% accuracy. When we switched to a deep neural network, accuracy went up to 98%.\"",
    "orig_name": "heuristic",
    "source": "google_ml"
  },
  {
    "definition": "A synthetic layer in a neural network between the input layer (that is, the features) and the output layer (the prediction). Hidden layers typically contain an activation function (such as ReLU) for training. A deep neural network contains more than one hidden layer.",
    "name": "hidden layer",
    "orig_definition": "A synthetic layer in a neural network between the input layer (that is, the features) and the output layer (the prediction). Hidden layers typically contain an activation function (such as ReLU) for training.  A deep neural network contains more than one hidden layer.",
    "orig_name": "hidden layer",
    "source": "google_ml"
  },
  {
    "definition": "A category of clustering algorithms that create a tree of clusters. Hierarchical clustering is well-suited to hierarchical data, such as botanical taxonomies.",
    "name": "hierarchical clustering",
    "orig_definition": "A category of clustering algorithms that create a tree of clusters. Hierarchical clustering is well-suited to hierarchical data, such as botanical taxonomies. There are two types of hierarchical clustering algorithms:",
    "orig_name": "hierarchical clustering",
    "source": "google_ml"
  },
  {
    "definition": "A family of loss functions for classification designed to find the decision boundary as distant as possible from each training example, thus maximizing the margin between examples and the boundary. KSVMs use hinge loss (or a related function, such as squared hinge loss).",
    "name": "hinge loss",
    "orig_definition": "A family of loss functions for classification designed to find the decision boundary as distant as possible from each training example, thus maximizing the margin between examples and the boundary. KSVMs use hinge loss (or a related function, such as squared hinge loss). For binary classification, the hinge loss function is defined as follows:",
    "orig_name": "hinge loss",
    "source": "google_ml"
  },
  {
    "definition": "Examples intentionally not used (\"held out\") during training. The validation dataset and test dataset are examples of holdout data. Holdout data helps evaluate your model's ability to generalize to data other than the data it was trained on. The loss on the holdout set provides a better estimate of the loss on an unseen dataset than does the loss on the training set.",
    "name": "holdout data",
    "orig_definition": "Examples intentionally not used (\"held out\") during training. The validation dataset and test dataset are examples of holdout data. Holdout data helps evaluate your model's ability to generalize to data other than the data it was trained on. The loss on the holdout set provides a better estimate of the loss on an unseen dataset than does the loss on the training set.",
    "orig_name": "holdout data",
    "source": "google_ml"
  },
  {
    "definition": "The \"knobs\" that you tweak during successive runs of training a model. For example, learning rate is a hyperparameter.",
    "name": "hyperparameter",
    "orig_definition": "The \"knobs\" that you tweak during successive runs of training a model. For example, learning rate is a hyperparameter.",
    "orig_name": "hyperparameter",
    "source": "google_ml"
  },
  {
    "definition": "A boundary that separates a space into two subspaces. For example, a line is a hyperplane in two dimensions and a plane is a hyperplane in three dimensions. More typically in machine learning, a hyperplane is the boundary separating a high-dimensional space. Kernel Support Vector Machines use hyperplanes to separate positive classes from negative classes, often in a very high-dimensional space.",
    "name": "hyperplane",
    "orig_definition": "A boundary that separates a space into two subspaces.  For example, a line is a hyperplane in two dimensions and a plane is a hyperplane in three dimensions. More typically in machine learning, a hyperplane is the boundary separating a high-dimensional space.  Kernel Support Vector Machines use hyperplanes to separate positive classes from negative classes, often in a very high-dimensional space.",
    "orig_name": "hyperplane",
    "source": "google_ml"
  },
  {
    "definition": "Abbreviation for independently and identically distributed.",
    "name": "i.i.d.",
    "orig_definition": "Abbreviation for independently and identically distributed.",
    "orig_name": "i.i.d.",
    "source": "google_ml"
  },
  {
    "definition": "A process that classifies object(s), pattern(s), or concept(s) in an image. Image recognition is also known as image classification.",
    "name": "image recognition",
    "orig_definition": "A process that classifies object(s), pattern(s), or concept(s) in an image. Image recognition is also known as image classification.",
    "orig_name": "image recognition",
    "source": "google_ml"
  },
  {
    "definition": "A binary classification problem in which the labels for the two classes have significantly different frequencies. For example, a disease dataset in which 0.0001 of examples have positive labels and 0.9999 have negative labels is a class-imbalanced problem, but a football game predictor in which 0.51 of examples label one team winning and 0.49 label the other team winning is not a class-imbalanced problem.",
    "name": "imbalanced dataset",
    "orig_definition": "Synonym for class-imbalanced dataset.",
    "orig_name": "imbalanced dataset",
    "source": "google_ml"
  },
  {
    "definition": "Automatically making an association or assumption based on one\u2019s mental models and memories.",
    "name": "implicit bias",
    "orig_definition": "Automatically making an association or assumption based on one\u2019s mental models and memories. Implicit bias can affect the following:",
    "orig_name": "implicit bias",
    "source": "google_ml"
  },
  {
    "definition": "The idea that some notions of fairness are mutually incompatible and cannot be satisfied simultaneously. As a result, there is no single universal metric for quantifying fairness that can be applied to all ML problems.",
    "name": "incompatibility of fairness metrics",
    "orig_definition": "The idea that some notions of fairness are mutually incompatible and cannot be satisfied simultaneously. As a result, there is no single universal metric for quantifying fairness that can be applied to all ML problems.",
    "orig_name": "incompatibility of fairness metrics",
    "source": "google_ml"
  },
  {
    "definition": "Data drawn from a distribution that doesn't change, and where each value drawn doesn't depend on values that have been drawn previously. An i.i.d. is the ideal gas of machine learning\u2014a useful mathematical construct but almost never exactly found in the real world. For example, the distribution of visitors to a web page may be i.i.d. over a brief window of time; that is, the distribution doesn't change during that brief window and one person's visit is generally independent of another's visit. However, if you expand that window of time, seasonal differences in the web page's visitors may appear.",
    "name": "independently and identically distributed",
    "orig_definition": "Data drawn from a distribution that doesn't change, and where each value drawn doesn't depend on values that have been drawn previously. An i.i.d. is the ideal gas of machine learning\u2014a useful mathematical construct but almost never exactly found in the real world. For example, the distribution of visitors to a web page may be i.i.d. over a brief window of time; that is, the distribution doesn't change during that brief window and one person's visit is generally independent of another's visit. However, if you expand that window of time, seasonal differences in the web page's visitors may appear.",
    "orig_name": "independently and identically distributed (i.i.d)",
    "source": "google_ml"
  },
  {
    "definition": "A fairness metric that checks whether similar individuals are classified similarly. For example, Brobdingnagian Academy might want to satisfy individual fairness by ensuring that two students with identical grades and standardized test scores are equally likely to gain admission.",
    "name": "individual fairness",
    "orig_definition": "A fairness metric that checks whether similar individuals are classified similarly. For example, Brobdingnagian Academy might want to satisfy individual fairness by ensuring that two students with identical grades and standardized test scores are equally likely to gain admission.",
    "orig_name": "individual fairness",
    "source": "google_ml"
  },
  {
    "definition": "In machine learning, often refers to the process of making predictions by applying the trained model to unlabeled examples. In statistics, inference refers to the process of fitting the parameters of a distribution conditioned on some observed data. (See the  Wikipedia article on statistical inference.)",
    "name": "inference",
    "orig_definition": "In machine learning, often refers to the process of making predictions by applying the trained model to unlabeled examples. In statistics, inference refers to the process of fitting the parameters of a distribution conditioned on some observed data. (See the  Wikipedia article on statistical inference.)",
    "orig_name": "inference",
    "source": "google_ml"
  },
  {
    "definition": "Showing partiality to one's own group or own characteristics. If testers or raters consist of the machine learning developer's friends, family, or colleagues, then in-group bias may invalidate product testing or the dataset.",
    "name": "in-group bias",
    "orig_definition": "Showing partiality to one's own group or own characteristics. If testers or raters consist of the machine learning developer's friends, family, or colleagues, then in-group bias may invalidate product testing or the dataset.",
    "orig_name": "in-group bias",
    "source": "google_ml"
  },
  {
    "definition": "In TensorFlow, a function that returns input data to the training, evaluation, or prediction method of an Estimator. For example, the training input function returns a batch of features and labels from the training set.",
    "name": "input function",
    "orig_definition": "In TensorFlow, a function that returns input data to the training, evaluation, or prediction method of an Estimator.  For example, the training input function returns a batch of features and labels from the training set.",
    "orig_name": "input function",
    "source": "google_ml"
  },
  {
    "definition": "The first layer (the one that receives the input data) in a neural network.",
    "name": "input layer",
    "orig_definition": "The first layer (the one that receives the input data) in a neural network.",
    "orig_name": "input layer",
    "source": "google_ml"
  },
  {
    "definition": "One row of a dataset. An example contains one or more features and possibly a label.",
    "name": "instance",
    "orig_definition": "Synonym for example.",
    "orig_name": "instance",
    "source": "google_ml"
  },
  {
    "definition": "The degree to which a model's predictions can be readily explained. Deep models are often non-interpretable; that is, a deep model's different layers can be hard to decipher. By contrast, linear regression models and wide models are typically far more interpretable.",
    "name": "interpretability",
    "orig_definition": "The degree to which a model's predictions can be readily explained. Deep models are often non-interpretable; that is, a deep model's different layers can be hard to decipher. By contrast, linear regression models and wide models are typically far more interpretable.",
    "orig_name": "interpretability",
    "source": "google_ml"
  },
  {
    "definition": "A measurement of how often human raters agree when doing a task. If raters disagree, the task instructions may need to be improved. Also sometimes called inter-annotator agreement or inter-rater reliability.",
    "name": "inter-rater agreement",
    "orig_definition": "A measurement of how often human raters agree when doing a task. If raters disagree, the task instructions may need to be improved. Also sometimes called inter-annotator agreement or inter-rater reliability.  See also Cohen's kappa, which is one of the most popular inter-rater agreement measurements.",
    "orig_name": "inter-rater agreement",
    "source": "google_ml"
  },
  {
    "definition": "The intersection of two sets divided by their union. In machine-learning image-detection tasks, IoU is used to measure the accuracy of the model\u2019s predicted bounding box with respect to the ground-truth bounding box. In this case, the IoU for the two boxes is the ratio between the overlapping area and the total area, and its value ranges from 0 (no overlap of predicted bounding box and ground-truth bounding box) to 1 (predicted bounding box and ground-truth bounding box have the exact same coordinates).",
    "name": "intersection over union",
    "orig_definition": "The intersection of two sets divided by their union. In machine-learning image-detection tasks, IoU is used to measure the accuracy of the model\u2019s predicted bounding box with respect to the ground-truth bounding box. In this case, the IoU for the two boxes is the ratio between the overlapping area and the total area, and its value ranges from 0 (no overlap of predicted bounding box and ground-truth bounding box) to 1 (predicted bounding box and ground-truth bounding box have the exact same coordinates).",
    "orig_name": "intersection over union (IoU)",
    "source": "google_ml"
  },
  {
    "definition": "Abbreviation for intersection over union.",
    "name": "IoU",
    "orig_definition": "Abbreviation for intersection over union.",
    "orig_name": "IoU",
    "source": "google_ml"
  },
  {
    "definition": "In recommendation systems, a matrix of embeddings generated by matrix factorization that holds latent signals about each item. Each row of the item matrix holds the value of a single latent feature for all items. For example, consider a movie recommendation system. Each column in the item matrix represents a single movie. The latent signals might represent genres, or might be harder-to-interpret signals that involve complex interactions among genre, stars, movie age, or other factors.",
    "name": "item matrix",
    "orig_definition": "In recommendation systems, a matrix of embeddings generated by matrix factorization that holds latent signals about each item. Each row of the item matrix holds the value of a single latent feature for all items. For example, consider a movie recommendation system. Each column in the item matrix represents a single movie. The latent signals might represent genres, or might be harder-to-interpret signals that involve complex interactions among genre, stars, movie age, or other factors.",
    "orig_name": "item matrix",
    "source": "google_ml"
  },
  {
    "definition": "In a recommendation system, the entities that a system recommends. For example, videos are the items that a video store recommends, while books are the items that a bookstore recommends.",
    "name": "items",
    "orig_definition": "In a recommendation system, the entities that a system recommends. For example, videos are the items that a video store recommends, while books are the items that a bookstore recommends.",
    "orig_name": "items",
    "source": "google_ml"
  },
  {
    "definition": "A single update of a model's weights during training. An iteration consists of computing the gradients of the parameters with respect to the loss on a single batch of data.",
    "name": "iteration",
    "orig_definition": "A single update of a model's weights during training.  An iteration consists of computing the gradients of the parameters with respect to the loss on a single batch of data.",
    "orig_name": "iteration",
    "source": "google_ml"
  },
  {
    "definition": "A popular Python machine learning API. Keras runs on several deep learning frameworks, including TensorFlow, where it is made available as tf.keras.",
    "name": "Keras",
    "orig_definition": "A popular Python machine learning API. Keras runs on several deep learning frameworks, including TensorFlow, where it is made available as tf.keras.",
    "orig_name": "Keras",
    "source": "google_ml"
  },
  {
    "definition": "The coordinates of particular features in an image. For example, for an image recognition model that distinguishes flower species, keypoints might be the center of each petal, the stem, the stamen, and so on.",
    "name": "keypoints",
    "orig_definition": "The coordinates of particular features in an image. For example, for an image recognition model that distinguishes flower species, keypoints might be the center of each petal, the stem, the stamen, and so on.",
    "orig_name": "keypoints",
    "source": "google_ml"
  },
  {
    "definition": "A classification algorithm that seeks to maximize the margin between positive and negative classes by mapping input data vectors to a higher dimensional space. For example, consider a classification problem in which the input dataset has a hundred features. To maximize the margin between positive and negative classes, a KSVM could internally map those features into a million-dimension space. KSVMs uses a loss function called hinge loss.",
    "name": "Kernel Support Vector Machines",
    "orig_definition": "A classification algorithm that seeks to maximize the margin between positive and negative classes by mapping input data vectors to a higher dimensional space.  For example, consider a classification problem in which the input dataset has a hundred features. To maximize the margin between positive and negative classes, a KSVM could internally map those features into a million-dimension space.  KSVMs uses a loss function called hinge loss.",
    "orig_name": "Kernel Support Vector Machines (KSVMs)",
    "source": "google_ml"
  },
  {
    "definition": "A popular clustering algorithm that groups examples in unsupervised learning.",
    "name": "k-means",
    "orig_definition": "A popular clustering algorithm that groups examples in unsupervised learning. The k-means algorithm basically does the following:",
    "orig_name": "k-means",
    "source": "google_ml"
  },
  {
    "definition": "A clustering algorithm closely related to k-means.",
    "name": "k-median",
    "orig_definition": "A clustering algorithm closely related to k-means. The practical difference between the two is as follows:",
    "orig_name": "k-median",
    "source": "google_ml"
  },
  {
    "definition": "Loss function based on the absolute value of the difference between the values that a model is predicting and the actual values of the labels. L1 loss is less sensitive to outliers than L2 loss.",
    "name": "L1 loss",
    "orig_definition": "Loss function based on the absolute value of the difference between the values that a model is predicting and the actual values of the labels. L1 loss is less sensitive to outliers than L2 loss.",
    "orig_name": "L1 loss",
    "source": "google_ml"
  },
  {
    "definition": "A type of regularization that penalizes weights in proportion to the sum of the absolute values of the weights. In models relying on sparse features, L1 regularization helps drive the weights of irrelevant or barely relevant features to exactly 0, which removes those features from the model. Contrast with L2 regularization.",
    "name": "L1 regularization",
    "orig_definition": "A type of regularization that penalizes weights in proportion to the sum of the absolute values of the weights. In models relying on sparse features, L1 regularization helps drive the weights of irrelevant or barely relevant features to exactly 0, which removes those features from the model. Contrast with L2 regularization.",
    "orig_name": "L1 regularization",
    "source": "google_ml"
  },
  {
    "definition": "See squared loss.",
    "name": "L2 loss",
    "orig_definition": "See squared loss.",
    "orig_name": "L2 loss",
    "source": "google_ml"
  },
  {
    "definition": "A type of regularization that penalizes weights in proportion to the sum of the squares of the weights. L2 regularization helps drive outlier weights (those with high positive or low negative values) closer to 0 but not quite to 0. (Contrast with L1 regularization.) L2 regularization always improves generalization in linear models.",
    "name": "L2 regularization",
    "orig_definition": "A type of regularization that penalizes weights in proportion to the sum of the squares of the weights. L2 regularization helps drive outlier weights (those with high positive or low negative values) closer to 0 but not quite to 0. (Contrast with L1 regularization.) L2 regularization always improves generalization in linear models.",
    "orig_name": "L2 regularization",
    "source": "google_ml"
  },
  {
    "definition": "In supervised learning, the \"answer\" or \"result\" portion of an example. Each example in a labeled dataset consists of one or more features and a label. For instance, in a housing dataset, the features might include the number of bedrooms, the number of bathrooms, and the age of the house, while the label might be the house's price. In a spam detection dataset, the features might include the subject line, the sender, and the email message itself, while the label would probably be either \"spam\" or \"not spam.\"",
    "name": "label",
    "orig_definition": "In supervised learning, the \"answer\" or \"result\" portion of an example. Each example in a labeled dataset consists of one or more features and a label. For instance, in a housing dataset, the features might include the number of bedrooms, the number of bathrooms, and the age of the house, while the label might be the house's price. In a spam detection dataset, the features might include the subject line, the sender, and the email message itself, while the label would probably be either \"spam\" or \"not spam.\"",
    "orig_name": "label",
    "source": "google_ml"
  },
  {
    "definition": "An example that contains features and a label. In supervised training, models learn from labeled examples.",
    "name": "labeled example",
    "orig_definition": "An example that contains features and a label. In supervised training, models learn from labeled examples.",
    "orig_name": "labeled example",
    "source": "google_ml"
  },
  {
    "definition": "A scalar value, represented as lambda, specifying the relative importance of the regularization function.",
    "name": "lambda",
    "orig_definition": "Synonym for regularization rate.",
    "orig_name": "lambda",
    "source": "google_ml"
  },
  {
    "definition": "The coordinates of particular features in an image. For example, for an image recognition model that distinguishes flower species, keypoints might be the center of each petal, the stem, the stamen, and so on.",
    "name": "landmarks",
    "orig_definition": "Synonym for keypoints.",
    "orig_name": "landmarks",
    "source": "google_ml"
  },
  {
    "definition": "A set of neurons in a neural network that process a set of input features, or the output of those neurons.",
    "name": "layer",
    "orig_definition": "A set of neurons in a neural network that process a set of input features, or the output of those neurons.",
    "orig_name": "layer",
    "source": "google_ml"
  },
  {
    "definition": "A TensorFlow API for constructing a deep neural network as a composition of layers.",
    "name": "Layers API",
    "orig_definition": "A TensorFlow API for constructing a deep neural network as a composition of layers. The Layers API enables you to build different types of layers, such as:",
    "orig_name": "Layers API (tf.layers)",
    "source": "google_ml"
  },
  {
    "definition": "A scalar used to train a model via gradient descent. During each iteration, the gradient descent algorithm multiplies the learning rate by the gradient. The resulting product is called the gradient step.",
    "name": "learning rate",
    "orig_definition": "A scalar used to train a model via gradient descent. During each iteration, the gradient descent algorithm multiplies the learning rate by the gradient.  The resulting product is called the gradient step.",
    "orig_name": "learning rate",
    "source": "google_ml"
  },
  {
    "definition": "A linear regression model trained by minimizing L2 Loss.",
    "name": "least squares regression",
    "orig_definition": "A linear regression model trained by minimizing L2 Loss.",
    "orig_name": "least squares regression",
    "source": "google_ml"
  },
  {
    "definition": "A model that assigns one weight per feature to make predictions. (Linear models also incorporate a bias.) By contrast, the relationship of weights to features in  deep models is not one-to-one.",
    "name": "linear model",
    "orig_definition": "A model that assigns one weight per feature to make predictions. (Linear models also incorporate a bias.) By contrast, the relationship of weights to features in  deep models is not one-to-one.",
    "orig_name": "linear model",
    "source": "google_ml"
  },
  {
    "definition": "Using the raw output (\\(y'\\)) of a linear model as the actual prediction in a regression model. The goal of a regression problem is to make a real-valued prediction. For example, if the raw output (\\(y'\\)) of a linear model is 8.37, then the prediction is 8.37.",
    "name": "linear regression",
    "orig_definition": "Using the raw output (\\(y'\\)) of a linear model as the actual prediction in a regression model. The goal of a regression problem is to make a real-valued prediction. For example, if the raw output (\\(y'\\)) of a linear model is 8.37, then the prediction is 8.37.",
    "orig_name": "linear regression",
    "source": "google_ml"
  },
  {
    "definition": "A classification model that uses a sigmoid function to convert a linear model's raw prediction (\\(y'\\)) into a value between 0 and 1.",
    "name": "logistic regression",
    "orig_definition": "A classification model that uses a sigmoid function to convert a linear model's raw prediction (\\(y'\\)) into a value between 0 and 1. You can interpret the value between 0 and 1 in either of the following two ways:",
    "orig_name": "logistic regression",
    "source": "google_ml"
  },
  {
    "definition": "The vector of raw (non-normalized) predictions that a classification model generates, which is ordinarily then passed to a normalization function. If the model is solving a multi-class classification problem, logits typically become an input to the softmax function. The softmax function then generates a vector of (normalized) probabilities with one value for each possible class.",
    "name": "logits",
    "orig_definition": "The vector of raw (non-normalized) predictions that a classification model generates, which is ordinarily then passed to a normalization function. If the model is solving a multi-class classification problem, logits typically become an input to the softmax function. The softmax function then generates a vector of (normalized) probabilities with one value for each possible class.",
    "orig_name": "logits",
    "source": "google_ml"
  },
  {
    "definition": "The loss function used in binary logistic regression.",
    "name": "Log Loss",
    "orig_definition": "The loss function used in binary logistic regression.",
    "orig_name": "Log Loss",
    "source": "google_ml"
  },
  {
    "definition": "The logarithm of the odds of some event.",
    "name": "log-odds",
    "orig_definition": "The logarithm of the odds of some event.",
    "orig_name": "log-odds",
    "source": "google_ml"
  },
  {
    "definition": "A type of cell in a recurrent neural network used to process sequences of data in applications such as handwriting recognition, machine translation, and image captioning. LSTMs address the vanishing gradient problem that occurs when training RNNs due to long data sequences by maintaining history in an internal memory state based on new input and context from previous cells in the RNN.",
    "name": "Long Short-Term Memory",
    "orig_definition": "A type of cell in a recurrent neural network used to process sequences of data in applications such as handwriting recognition, machine translation, and image captioning. LSTMs address the vanishing gradient problem that occurs when training RNNs due to long data sequences by maintaining history in an internal memory state based on new input and context from previous cells in the RNN.",
    "orig_name": "Long Short-Term Memory (LSTM)",
    "source": "google_ml"
  },
  {
    "definition": "A measure of how far a model's predictions are from its label. Or, to phrase it more pessimistically, a measure of how bad the model is. To determine this value, a model must define a loss function. For example, linear regression models typically use mean squared error for a loss function, while logistic regression models use Log Loss.",
    "name": "loss",
    "orig_definition": "A measure of how far a model's predictions are from its label. Or, to phrase it more pessimistically, a measure of how bad the model is. To determine this value, a model must define a loss function. For example, linear regression models typically use mean squared error for a loss function, while logistic regression models use Log Loss.",
    "orig_name": "loss",
    "source": "google_ml"
  },
  {
    "definition": "A graph of loss as a function of training iterations.",
    "name": "loss curve",
    "orig_definition": "A graph of loss as a function of training iterations. For example:",
    "orig_name": "loss curve",
    "source": "google_ml"
  },
  {
    "definition": "A graph of weight(s) vs. loss. Gradient descent aims to find the weight(s) for which the loss surface is at a local minimum.",
    "name": "loss surface",
    "orig_definition": "A graph of weight(s) vs. loss. Gradient descent aims to find the weight(s) for which the loss surface is at a local minimum.",
    "orig_name": "loss surface",
    "source": "google_ml"
  },
  {
    "definition": "Abbreviation for Long Short-Term Memory.",
    "name": "LSTM",
    "orig_definition": "Abbreviation for Long Short-Term Memory.",
    "orig_name": "LSTM",
    "source": "google_ml"
  },
  {
    "definition": "A program or system that builds (trains) a predictive model from input data. The system uses the learned model to make useful predictions from new (never-before-seen) data drawn from the same distribution as the one used to train the model. Machine learning also refers to the field of study concerned with these programs or systems.",
    "name": "machine learning",
    "orig_definition": "A program or system that builds (trains) a predictive model from input data. The system uses the learned model to make useful predictions from new (never-before-seen) data drawn from the same distribution as the one used to train the model. Machine learning also refers to the field of study concerned with these programs or systems.",
    "orig_name": "machine learning",
    "source": "google_ml"
  },
  {
    "definition": "The more common label in a class-imbalanced dataset. For example, given a dataset containing 99% non-spam labels and 1% spam labels, the non-spam labels are the majority class.",
    "name": "majority class",
    "orig_definition": "The more common label in a class-imbalanced dataset. For example, given a dataset containing 99% non-spam labels and 1% spam labels, the non-spam labels are the majority class.",
    "orig_name": "majority class",
    "source": "google_ml"
  },
  {
    "definition": "A graph representing the decision-making model where decisions (or actions) are taken to navigate a sequence of states under the assumption that the Markov property holds. In reinforcement learning, these transitions between states return a numerical reward.",
    "name": "Markov decision process",
    "orig_definition": "A graph representing the decision-making model where decisions (or actions) are taken to navigate a sequence of states under the assumption that the Markov property holds. In reinforcement learning, these transitions between states return a numerical reward.",
    "orig_name": "Markov decision process (MDP)",
    "source": "google_ml"
  },
  {
    "definition": "A property of certain environments, where state transitions are entirely determined by information implicit in the current state and the agent\u2019s action.",
    "name": "Markov property",
    "orig_definition": "A property of certain environments, where state transitions are entirely determined by information implicit in the current state and the agent\u2019s action.",
    "orig_name": "Markov property",
    "source": "google_ml"
  },
  {
    "definition": "An open-source Python 2D plotting library. matplotlib helps you visualize different aspects of machine learning.",
    "name": "matplotlib",
    "orig_definition": "An open-source Python 2D plotting library. matplotlib helps you visualize different aspects of machine learning.",
    "orig_name": "matplotlib",
    "source": "google_ml"
  },
  {
    "definition": "In math, a mechanism for finding the matrices whose dot product approximates a target matrix.",
    "name": "matrix factorization",
    "orig_definition": "In math, a mechanism for finding the matrices whose dot product approximates a target matrix.",
    "orig_name": "matrix factorization",
    "source": "google_ml"
  },
  {
    "definition": "An error metric calculated by taking an average of absolute errors. In the context of evaluating a model\u2019s accuracy, MAE is the average absolute difference between the expected and predicted values across all training examples.",
    "name": "Mean Absolute Error",
    "orig_definition": "An error metric calculated by taking an average of absolute errors. In the context of evaluating a model\u2019s accuracy, MAE is the average absolute difference between the expected and predicted values across all training examples. Specifically, for $n$ examples, for each value $y$ and its prediction $\\hat{y}$, MAE is defined as follows:",
    "orig_name": "Mean Absolute Error (MAE)",
    "source": "google_ml"
  },
  {
    "definition": "The average squared loss per example. MSE is calculated by dividing the squared loss by the number of examples. The values that TensorFlow Playground displays for \"Training loss\" and \"Test loss\" are MSE.",
    "name": "Mean Squared Error",
    "orig_definition": "The average squared loss per example. MSE is calculated by dividing the squared loss by the number of examples. The values that TensorFlow Playground displays for \"Training loss\" and \"Test loss\" are MSE.",
    "orig_name": "Mean Squared Error (MSE)",
    "source": "google_ml"
  },
  {
    "definition": "A number that you care about. May or may not be directly optimized in a machine-learning system. A metric that your system tries to optimize is called an objective.",
    "name": "metric",
    "orig_definition": "A number that you care about. May or may not be directly optimized in a machine-learning system. A metric that your system tries to optimize is called an objective.",
    "orig_name": "metric",
    "source": "google_ml"
  },
  {
    "definition": "A TensorFlow API for evaluating models. For example, tf.metrics.accuracy determines how often a model's predictions match labels. When writing a custom Estimator, you invoke Metrics API functions to specify how your model should be evaluated.",
    "name": "Metrics API",
    "orig_definition": "A TensorFlow API for evaluating models. For example, tf.metrics.accuracy determines how often a model's predictions match labels. When writing a custom Estimator, you invoke Metrics API functions to specify how your model should be evaluated.",
    "orig_name": "Metrics API (tf.metrics)",
    "source": "google_ml"
  },
  {
    "definition": "A small, randomly selected subset of the entire batch of examples run together in a single iteration of training or inference. The batch size of a mini-batch is usually between 10 and 1,000. It is much more efficient to calculate the loss on a mini-batch than on the full training data.",
    "name": "mini-batch",
    "orig_definition": "A small, randomly selected subset of the entire batch of examples run together in a single iteration of training or inference. The batch size of a mini-batch is usually between 10 and 1,000. It is much more efficient to calculate the loss on a mini-batch than on the full training data.",
    "orig_name": "mini-batch",
    "source": "google_ml"
  },
  {
    "definition": "A gradient descent algorithm that uses mini-batches. In other words, mini-batch SGD estimates the gradient based on a small subset of the training data. Vanilla SGD uses a mini-batch of size 1.",
    "name": "mini-batch stochastic gradient descent",
    "orig_definition": "A gradient descent algorithm that uses mini-batches. In other words, mini-batch SGD estimates the gradient based on a small subset of the training data. Vanilla SGD uses a mini-batch of size 1.",
    "orig_name": "mini-batch stochastic gradient descent (SGD)",
    "source": "google_ml"
  },
  {
    "definition": "A loss function for generative adversarial networks, based on the cross-entropy between the distribution of generated data and real data.",
    "name": "minimax loss",
    "orig_definition": "A loss function for generative adversarial networks, based on the cross-entropy between the distribution of generated data and real data.",
    "orig_name": "minimax loss",
    "source": "google_ml"
  },
  {
    "definition": "The less common label in a class-imbalanced dataset. For example, given a dataset containing 99% non-spam labels and 1% spam labels, the spam labels are the minority class.",
    "name": "minority class",
    "orig_definition": "The less common label in a class-imbalanced dataset. For example, given a dataset containing 99% non-spam labels and 1% spam labels, the spam labels are the minority class.",
    "orig_name": "minority class",
    "source": "google_ml"
  },
  {
    "definition": "Abbreviation for machine learning.",
    "name": "ML",
    "orig_definition": "Abbreviation for machine learning.",
    "orig_name": "ML",
    "source": "google_ml"
  },
  {
    "definition": "A public-domain dataset compiled by LeCun, Cortes, and Burges containing 60,000 images, each image showing how a human manually wrote a particular digit from 0\u20139. Each image is stored as a 28x28 array of integers, where each integer is a grayscale value between 0 and 255, inclusive.",
    "name": "MNIST",
    "orig_definition": "A public-domain dataset compiled by LeCun, Cortes, and Burges containing 60,000 images, each image showing how a human manually wrote a particular digit from 0\u20139.  Each image is stored as a 28x28 array of integers, where each integer is a grayscale value between 0 and 255, inclusive.",
    "orig_name": "MNIST",
    "source": "google_ml"
  },
  {
    "definition": "The representation of what a machine learning system has learned from the training data.",
    "name": "model",
    "orig_definition": "The representation of what a machine learning system has learned from the training data. Within TensorFlow, model is an overloaded term, which can have either of the following two related meanings:",
    "orig_name": "model",
    "source": "google_ml"
  },
  {
    "definition": "The complexity of problems that a model can learn. The more complex the problems that a model can learn, the higher the model\u2019s capacity. A model\u2019s capacity typically increases with the number of model parameters. For a formal definition of classifier capacity, see VC dimension.",
    "name": "model capacity",
    "orig_definition": "The complexity of problems that a model can learn. The more complex the problems that a model can learn, the higher the model\u2019s capacity. A model\u2019s capacity typically increases with the number of model parameters. For a formal definition of classifier capacity, see VC dimension.",
    "orig_name": "model capacity",
    "source": "google_ml"
  },
  {
    "definition": "The function within an Estimator that implements machine learning training, evaluation, and inference. For example, the training portion of a model function might handle tasks such as defining the topology of a deep neural network and identifying its optimizer function. When using premade Estimators, someone has already written the model function for you. When using custom Estimators, you must write the model function yourself.",
    "name": "model function",
    "orig_definition": "The function within an Estimator that implements machine learning training, evaluation, and inference. For example, the training portion of a model function might handle tasks such as defining the topology of a deep neural network and identifying its optimizer function.  When using premade Estimators, someone has already written the model function for you.  When using custom Estimators, you must write the model function yourself.",
    "orig_name": "model function",
    "source": "google_ml"
  },
  {
    "definition": "The process of determining the best model.",
    "name": "model training",
    "orig_definition": "The process of determining the best model.",
    "orig_name": "model training",
    "source": "google_ml"
  },
  {
    "definition": "A sophisticated gradient descent algorithm in which a learning step depends not only on the derivative in the current step, but also on the derivatives of the step(s) that immediately preceded it. Momentum involves computing an exponentially weighted moving average of the gradients over time, analogous to momentum in physics. Momentum sometimes prevents learning from getting stuck in local minima.",
    "name": "Momentum",
    "orig_definition": "A sophisticated gradient descent algorithm in which a learning step depends not only on the derivative in the current step, but also on the derivatives of the step(s) that immediately preceded it. Momentum involves computing an exponentially weighted moving average of the gradients over time, analogous to momentum in physics.  Momentum sometimes prevents learning from getting stuck in local minima.",
    "orig_name": "Momentum",
    "source": "google_ml"
  },
  {
    "definition": "Classification problems that distinguish among more than two classes. For example, there are approximately 128 species of maple trees, so a model that categorized maple tree species would be multi-class. Conversely, a model that divided emails into only two categories (spam and not spam) would be a binary classification model.",
    "name": "multi-class classification",
    "orig_definition": "Classification problems that distinguish among more than two classes. For example, there are approximately 128 species of maple trees, so a model that categorized maple tree species would be multi-class. Conversely, a model that divided emails into only two categories (spam and not spam) would be a binary classification model.",
    "orig_name": "multi-class classification",
    "source": "google_ml"
  },
  {
    "definition": "Using logistic regression in multi-class classification problems.",
    "name": "multi-class logistic regression",
    "orig_definition": "Using logistic regression in multi-class classification problems.",
    "orig_name": "multi-class logistic regression",
    "source": "google_ml"
  },
  {
    "definition": "Classification problems that distinguish among more than two classes. For example, there are approximately 128 species of maple trees, so a model that categorized maple tree species would be multi-class. Conversely, a model that divided emails into only two categories (spam and not spam) would be a binary classification model.",
    "name": "multinomial classification",
    "orig_definition": "Synonym for multi-class classification.",
    "orig_name": "multinomial classification",
    "source": "google_ml"
  },
  {
    "definition": "When one number in your model becomes a NaN during training, which causes many or all other numbers in your model to eventually become a NaN.",
    "name": "NaN trap",
    "orig_definition": "When one number in your model becomes a NaN during training, which causes many or all other numbers in your model to eventually become a NaN.",
    "orig_name": "NaN trap",
    "source": "google_ml"
  },
  {
    "definition": "Determining a user's intentions based on what the user typed or said. For example, a search engine uses natural language understanding to determine what the user is searching for based on what the user typed or said.",
    "name": "natural language understanding",
    "orig_definition": "Determining a user's intentions based on what the user typed or said. For example, a search engine uses natural language understanding to determine what the user is searching for based on what the user typed or said.",
    "orig_name": "natural language understanding",
    "source": "google_ml"
  },
  {
    "definition": "In binary classification, one class is termed positive and the other is termed negative. The positive class is the thing we're looking for and the negative class is the other possibility. For example, the negative class in a medical test might be \"not tumor.\" The negative class in an email classifier might be \"not spam.\"",
    "name": "negative class",
    "orig_definition": "In binary classification, one class is termed positive and the other is termed negative. The positive class is the thing we're looking for and the negative class is the other possibility. For example, the negative class in a medical test might be \"not tumor.\" The negative class in an email classifier might be \"not spam.\" See also positive class.",
    "orig_name": "negative class",
    "source": "google_ml"
  },
  {
    "definition": "A model that, taking inspiration from the brain, is composed of layers (at least one of which is hidden) consisting of simple connected units or neurons followed by nonlinearities.",
    "name": "neural network",
    "orig_definition": "A model that, taking inspiration from the brain, is composed of layers (at least one of which is hidden) consisting of simple connected units or neurons followed by nonlinearities.",
    "orig_name": "neural network",
    "source": "google_ml"
  },
  {
    "definition": "A node in a neural network, typically taking in multiple input values and generating one output value. The neuron calculates the output value by applying an activation function (nonlinear transformation) to a weighted sum of input values.",
    "name": "neuron",
    "orig_definition": "A node in a neural network, typically taking in multiple input values and generating one output value. The neuron calculates the output value by applying an activation function (nonlinear transformation) to a weighted sum of input values.",
    "orig_name": "neuron",
    "source": "google_ml"
  },
  {
    "definition": "An ordered sequence of N words. For example, truly madly is a 2-gram. Because order is relevant, madly truly is a different 2-gram than truly madly.",
    "name": "N-gram",
    "orig_definition": "An ordered sequence of N words.  For example, truly madly is a 2-gram. Because order is relevant, madly truly is a different 2-gram than truly madly.",
    "orig_name": "N-gram",
    "source": "google_ml"
  },
  {
    "definition": "Abbreviation for natural language understanding.",
    "name": "NLU",
    "orig_definition": "Abbreviation for natural language understanding.",
    "orig_name": "NLU",
    "source": "google_ml"
  },
  {
    "definition": "A neuron in a hidden layer.",
    "name": "node",
    "orig_definition": "A neuron in a hidden layer.",
    "orig_name": "node (neural network)",
    "source": "google_ml"
  },
  {
    "definition": "An operation in a TensorFlow graph.",
    "name": "node",
    "orig_definition": "An operation in a TensorFlow graph.",
    "orig_name": "node (TensorFlow graph)",
    "source": "google_ml"
  },
  {
    "definition": "Broadly speaking, anything that obscures the signal in a dataset. Noise can be introduced into data in a variety of ways.",
    "name": "noise",
    "orig_definition": "Broadly speaking, anything that obscures the signal in a dataset. Noise can be introduced into data in a variety of ways. For example:",
    "orig_name": "noise",
    "source": "google_ml"
  },
  {
    "definition": "See selection bias.",
    "name": "non-response bias",
    "orig_definition": "See selection bias.",
    "orig_name": "non-response bias",
    "source": "google_ml"
  },
  {
    "definition": "The process of converting an actual range of values into a standard range of values, typically -1 to +1 or 0 to 1. For example, suppose the natural range of a certain feature is 800 to 6,000. Through subtraction and division, you can normalize those values into the range -1 to +1.",
    "name": "normalization",
    "orig_definition": "The process of converting an actual range of values into a standard range of values, typically -1 to +1 or 0 to 1. For example, suppose the natural range of a certain feature is 800 to 6,000. Through subtraction and division, you can normalize those values into the range -1 to +1.",
    "orig_name": "normalization",
    "source": "google_ml"
  },
  {
    "definition": "Features represented as integers or real-valued numbers. For example, in a real estate model, you would probably represent the size of a house (in square feet or square meters) as numerical data. Representing a feature as numerical data indicates that the feature's values have a mathematical relationship to each other and possibly to the label. For example, representing the size of a house as numerical data indicates that a 200 square-meter house is twice as large as a 100 square-meter house. Furthermore, the number of square meters in a house probably has some mathematical relationship to the price of the house.",
    "name": "numerical data",
    "orig_definition": "Features represented as integers or real-valued numbers. For example, in a real estate model, you would probably represent the size of a house (in square feet or square meters) as numerical data.  Representing a feature as numerical data indicates that the feature's values have a mathematical relationship to each other and possibly to the label. For example, representing the size of a house as numerical data indicates that a 200 square-meter house is twice as large as a 100 square-meter house. Furthermore, the number of square meters in a house probably has some mathematical relationship to the price of the house.",
    "orig_name": "numerical data",
    "source": "google_ml"
  },
  {
    "definition": "An  open-source math library that provides efficient array operations in Python. pandas is built on NumPy.",
    "name": "NumPy",
    "orig_definition": "An  open-source math library that provides efficient array operations in Python. pandas is built on NumPy.",
    "orig_name": "NumPy",
    "source": "google_ml"
  },
  {
    "definition": "A metric that your algorithm is trying to optimize.",
    "name": "objective",
    "orig_definition": "A metric that your algorithm is trying to optimize.",
    "orig_name": "objective",
    "source": "google_ml"
  },
  {
    "definition": "The mathematical formula or metric that a model aims to optimize. For example, the objective function for linear regression is usually squared loss. Therefore, when training a linear regression model, the goal is to minimize squared loss.",
    "name": "objective function",
    "orig_definition": "The mathematical formula or metric that a model aims to optimize. For example, the objective function for linear regression is usually squared loss. Therefore, when training a linear regression model, the goal is to minimize squared loss.",
    "orig_name": "objective function",
    "source": "google_ml"
  },
  {
    "definition": "Generating a group of predictions, storing those predictions, and then retrieving those predictions on demand. Contrast with online inference.",
    "name": "offline inference",
    "orig_definition": "Generating a group of predictions, storing those predictions, and then retrieving those predictions on demand. Contrast with online inference.",
    "orig_name": "offline inference",
    "source": "google_ml"
  },
  {
    "definition": "A sparse vector in which:",
    "name": "one-hot encoding",
    "orig_definition": "A sparse vector in which:",
    "orig_name": "one-hot encoding",
    "source": "google_ml"
  },
  {
    "definition": "A machine learning approach, often used for object classification, designed to learn effective classifiers from a single training example.",
    "name": "one-shot learning",
    "orig_definition": "A machine learning approach, often used for object classification, designed to learn effective classifiers from a single training example.",
    "orig_name": "one-shot learning",
    "source": "google_ml"
  },
  {
    "definition": "Given a classification problem with N possible solutions, a one-vs.-all solution consists of N separate binary classifiers\u2014one binary classifier for each possible outcome.",
    "name": "one-vs.-all",
    "orig_definition": "Given a classification problem with N possible solutions, a one-vs.-all solution consists of N separate binary classifiers\u2014one binary classifier for each possible outcome. For example, given a model that classifies examples as animal, vegetable, or mineral, a one-vs.-all solution would provide the following three separate binary classifiers:",
    "orig_name": "one-vs.-all",
    "source": "google_ml"
  },
  {
    "definition": "Generating predictions on demand. Contrast with offline inference.",
    "name": "online inference",
    "orig_definition": "Generating predictions on demand. Contrast with offline inference.",
    "orig_name": "online inference",
    "source": "google_ml"
  },
  {
    "definition": "A node in the TensorFlow graph. In TensorFlow, any procedure that creates, manipulates, or destroys a Tensor is an operation. For example, a matrix multiply is an operation that takes two Tensors as input and generates one Tensor as output.",
    "name": "Operation",
    "orig_definition": "A node in the TensorFlow graph. In TensorFlow, any procedure that creates, manipulates, or destroys a Tensor is an operation. For example, a matrix multiply is an operation that takes two Tensors as input and generates one Tensor as output.",
    "orig_name": "Operation (op)",
    "source": "google_ml"
  },
  {
    "definition": "A specific implementation of the gradient descent algorithm. TensorFlow's base class for optimizers is tf.train.Optimizer.",
    "name": "optimizer",
    "orig_definition": "A specific implementation of the gradient descent algorithm. TensorFlow's base class for optimizers is tf.train.Optimizer. Popular optimizers include:",
    "orig_name": "optimizer",
    "source": "google_ml"
  },
  {
    "definition": "The tendency to see out-group members as more alike than in-group members when comparing attitudes, values, personality traits, and other characteristics. In-group refers to people you interact with regularly; out-group refers to people you do not interact with regularly. If you create a dataset by asking people to provide attributes about out-groups, those attributes may be less nuanced and more stereotyped than attributes that participants list for people in their in-group.",
    "name": "out-group homogeneity bias",
    "orig_definition": "The tendency to see out-group members as more alike than in-group members when comparing attitudes, values, personality traits, and other characteristics. In-group refers to people you interact with regularly; out-group refers to people you do not interact with regularly. If you create a dataset by asking people to provide attributes about out-groups, those attributes may be less nuanced and more stereotyped than attributes that participants list for people in their in-group.",
    "orig_name": "out-group homogeneity bias",
    "source": "google_ml"
  },
  {
    "definition": "Values distant from most other values.",
    "name": "outliers",
    "orig_definition": "Values distant from most other values. In machine learning, any of the following are outliers:",
    "orig_name": "outliers",
    "source": "google_ml"
  },
  {
    "definition": "The \"final\" layer of a neural network. The layer containing the answer(s).",
    "name": "output layer",
    "orig_definition": "The \"final\" layer of a neural network. The layer containing the answer(s).",
    "orig_name": "output layer",
    "source": "google_ml"
  },
  {
    "definition": "Creating a model that matches the training data so closely that the model fails to make correct predictions on new data.",
    "name": "overfitting",
    "orig_definition": "Creating a model that matches the training data so closely that the model fails to make correct predictions on new data.",
    "orig_name": "overfitting",
    "source": "google_ml"
  },
  {
    "definition": "A column-oriented data analysis API. Many machine learning frameworks, including TensorFlow, support pandas data structures as input.",
    "name": "pandas",
    "orig_definition": "A column-oriented data analysis API. Many machine learning frameworks, including TensorFlow, support pandas data structures as input. See the pandas documentation for details.",
    "orig_name": "pandas",
    "source": "google_ml"
  },
  {
    "definition": "A variable of a model that the machine learning system trains on its own. For example, weights are parameters whose values the machine learning system gradually learns through successive training iterations. Contrast with hyperparameter.",
    "name": "parameter",
    "orig_definition": "A variable of a model that the machine learning system trains on its own. For example, weights are parameters whose values the machine learning system gradually learns through successive training iterations. Contrast with hyperparameter.",
    "orig_name": "parameter",
    "source": "google_ml"
  },
  {
    "definition": "A job that keeps track of a model's parameters in a distributed setting.",
    "name": "Parameter Server",
    "orig_definition": "A job that keeps track of a model's parameters in a distributed setting.",
    "orig_name": "Parameter Server (PS)",
    "source": "google_ml"
  },
  {
    "definition": "The operation of adjusting a model's parameters during training, typically within a single iteration of gradient descent.",
    "name": "parameter update",
    "orig_definition": "The operation of adjusting a model's parameters during training, typically within a single iteration of gradient descent.",
    "orig_name": "parameter update",
    "source": "google_ml"
  },
  {
    "definition": "A derivative in which all but one of the variables is considered a constant. For example, the partial derivative of f(x, y) with respect to x is the derivative of f considered as a function of x alone (that is, keeping y constant). The partial derivative of f with respect to x focuses only on how x is changing and ignores all other variables in the equation.",
    "name": "partial derivative",
    "orig_definition": "A derivative in which all but one of the variables is considered a constant. For example, the partial derivative of f(x, y) with respect to x is the derivative of f considered as a function of x alone (that is, keeping y constant). The partial derivative of f with respect to x focuses only on how x is changing and ignores all other variables in the equation.",
    "orig_name": "partial derivative",
    "source": "google_ml"
  },
  {
    "definition": "See selection bias.",
    "name": "participation bias",
    "orig_definition": "Synonym for non-response bias.  See selection bias.",
    "orig_name": "participation bias",
    "source": "google_ml"
  },
  {
    "definition": "The algorithm by which variables are divided across parameter servers.",
    "name": "partitioning strategy",
    "orig_definition": "The algorithm by which variables are divided across parameter servers.",
    "orig_name": "partitioning strategy",
    "source": "google_ml"
  },
  {
    "definition": "A system (either hardware or software) that takes in one or more input values, runs a function on the weighted sum of the inputs, and computes a single output value. In machine learning, the function is typically nonlinear, such as ReLU, sigmoid, or tanh.",
    "name": "perceptron",
    "orig_definition": "A system (either hardware or software) that takes in one or more input values, runs a function on the weighted sum of the inputs, and computes a single output value. In machine learning, the function is typically nonlinear, such as ReLU, sigmoid, or tanh. For example, the following perceptron relies on the sigmoid function to process three input values:",
    "orig_name": "perceptron",
    "source": "google_ml"
  },
  {
    "definition": "Overloaded term with the following meanings:",
    "name": "performance",
    "orig_definition": "Overloaded term with the following meanings:",
    "orig_name": "performance",
    "source": "google_ml"
  },
  {
    "definition": "One measure of how well a model is accomplishing its task. For example, suppose your task is to read the first few letters of a word a user is typing on a smartphone keyboard, and to offer a list of possible completion words. Perplexity, P, for this task is approximately the number of guesses you need to offer in order for your list to contain the actual word the user is trying to type.",
    "name": "perplexity",
    "orig_definition": "One measure of how well a model is accomplishing its task. For example, suppose your task is to read the first few letters of a word a user is typing on a smartphone keyboard, and to offer a list of possible completion words. Perplexity, P, for this task is approximately the number of guesses you need to offer in order for your list to contain the actual word the user is trying to type.",
    "orig_name": "perplexity",
    "source": "google_ml"
  },
  {
    "definition": "The infrastructure surrounding a machine learning algorithm. A pipeline includes gathering the data, putting the data into training data files, training one or more models, and exporting the models to production.",
    "name": "pipeline",
    "orig_definition": "The infrastructure surrounding a machine learning algorithm. A pipeline includes gathering the data, putting the data into training data files, training one or more models, and exporting the models to production.",
    "orig_name": "pipeline",
    "source": "google_ml"
  },
  {
    "definition": "In reinforcement learning, an agent's probabilistic mapping from states to actions.",
    "name": "policy",
    "orig_definition": "In reinforcement learning, an agent's probabilistic mapping from states to actions.",
    "orig_name": "policy",
    "source": "google_ml"
  },
  {
    "definition": "Reducing a matrix (or matrices) created by an earlier convolutional layer to a smaller matrix. Pooling usually involves taking either the maximum or average value across the pooled area.",
    "name": "pooling",
    "orig_definition": "Reducing a matrix (or matrices) created by an earlier convolutional layer to a smaller matrix. Pooling usually involves taking either the maximum or average value across the pooled area. For example, suppose we have the following 3x3 matrix:",
    "orig_name": "pooling",
    "source": "google_ml"
  },
  {
    "definition": "In binary classification, the two possible classes are labeled as positive and negative. The positive outcome is the thing we're testing for. (Admittedly, we're simultaneously testing for both outcomes, but play along.) For example, the positive class in a medical test might be \"tumor.\" The positive class in an email classifier might be \"spam.\"",
    "name": "positive class",
    "orig_definition": "In binary classification, the two possible classes are labeled as positive and negative. The positive outcome is the thing we're testing for. (Admittedly, we're simultaneously testing for both outcomes, but play along.) For example, the positive class in a medical test might be \"tumor.\" The positive class in an email classifier might be \"spam.\"",
    "orig_name": "positive class",
    "source": "google_ml"
  },
  {
    "definition": "For example, one might apply post-processing to a binary classifier by setting a classification threshold such that equality of opportunity is maintained for some attribute by checking that the true positive rate is the same for all values of that attribute.",
    "name": "post-processing",
    "orig_definition": "For example, one might apply post-processing to a binary classifier by setting a classification threshold such that equality of opportunity is maintained for some attribute by checking that the true positive rate is the same for all values of that attribute.",
    "orig_name": "post-processing",
    "source": "google_ml"
  },
  {
    "definition": "Area under the interpolated precision-recall curve, obtained by plotting (recall, precision) points for different values of the classification threshold. Depending on how it's calculated, PR AUC may be equivalent to the average precision of the model.",
    "name": "PR AUC",
    "orig_definition": "Area under the interpolated precision-recall curve, obtained by plotting (recall, precision) points for different values of the classification threshold. Depending on how it's calculated, PR AUC may be equivalent to the average precision of the model.",
    "orig_name": "PR AUC (area under the PR curve)",
    "source": "google_ml"
  },
  {
    "definition": "A metric for classification models. Precision identifies the frequency with which a model was correct when predicting the positive class.",
    "name": "precision",
    "orig_definition": "A metric for classification models. Precision identifies the frequency with which a model was correct when predicting the positive class. That is:",
    "orig_name": "precision",
    "source": "google_ml"
  },
  {
    "definition": "A curve of precision vs. recall at different classification thresholds.",
    "name": "precision-recall curve",
    "orig_definition": "A curve of precision vs. recall at different classification thresholds.",
    "orig_name": "precision-recall curve",
    "source": "google_ml"
  },
  {
    "definition": "A model's output when provided with an input example.",
    "name": "prediction",
    "orig_definition": "A model's output when provided with an input example.",
    "orig_name": "prediction",
    "source": "google_ml"
  },
  {
    "definition": "A value indicating how far apart the average of predictions is from the average of labels in the dataset.",
    "name": "prediction bias",
    "orig_definition": "A value indicating how far apart the average of predictions is from the average of labels in the dataset.",
    "orig_name": "prediction bias",
    "source": "google_ml"
  },
  {
    "definition": "A fairness metric that checks whether, for a given classifier, the precision rates are equivalent for subgroups under consideration.",
    "name": "predictive parity",
    "orig_definition": "A fairness metric that checks whether, for a given classifier, the precision rates are equivalent for subgroups under consideration.",
    "orig_name": "predictive parity",
    "source": "google_ml"
  },
  {
    "definition": "Another name for predictive parity.",
    "name": "predictive rate parity",
    "orig_definition": "Another name for predictive parity.",
    "orig_name": "predictive rate parity",
    "source": "google_ml"
  },
  {
    "definition": "An Estimator that someone has already built. TensorFlow provides several premade Estimators, including DNNClassifier, DNNRegressor, and LinearClassifier. To learn more about premade Estimators, see the Premade Estimators chapter in the TensorFlow Programmers Guide.",
    "name": "premade Estimator",
    "orig_definition": "An Estimator that someone has already built. TensorFlow provides several premade Estimators, including DNNClassifier, DNNRegressor, and LinearClassifier.  To learn more about premade Estimators, see the Premade Estimators chapter in the TensorFlow Programmers Guide.",
    "orig_name": "premade Estimator",
    "source": "google_ml"
  },
  {
    "definition": "pre-trained model",
    "name": "preprocessing",
    "orig_definition": "pre-trained model",
    "orig_name": "preprocessing",
    "source": "google_ml"
  },
  {
    "definition": "Models or model components (such as embeddings) that have been already been trained. Sometimes, you'll feed pre-trained embeddings into a neural network. Other times, your model will train the embeddings itself rather than rely on the pre-trained embeddings.",
    "name": "pre-trained model",
    "orig_definition": "Models or model components (such as embeddings) that have been already been trained. Sometimes, you'll feed pre-trained embeddings into a neural network. Other times, your model will train the embeddings itself rather than rely on the pre-trained embeddings.",
    "orig_name": "pre-trained model",
    "source": "google_ml"
  },
  {
    "definition": "What you believe about the data before you begin training on it. For example, L2 regularization relies on a prior belief that weights should be small and normally distributed around zero.",
    "name": "prior belief",
    "orig_definition": "What you believe about the data before you begin training on it. For example, L2 regularization relies on a prior belief that weights should be small and normally distributed around zero.",
    "orig_name": "prior belief",
    "source": "google_ml"
  },
  {
    "definition": "proxy labels",
    "name": "proxy",
    "orig_definition": "proxy labels",
    "orig_name": "proxy (sensitive attributes)",
    "source": "google_ml"
  },
  {
    "definition": "Data used to approximate labels not directly available in a dataset.",
    "name": "proxy labels",
    "orig_definition": "Data used to approximate labels not directly available in a dataset.",
    "orig_name": "proxy labels",
    "source": "google_ml"
  },
  {
    "definition": "In reinforcement learning, the function that predicts the expected return from taking an action in a state and then following a given policy.",
    "name": "Q-function",
    "orig_definition": "In reinforcement learning, the function that predicts the expected return from taking an action in a state and then following a given policy.",
    "orig_name": "Q-function",
    "source": "google_ml"
  },
  {
    "definition": "In reinforcement learning, an algorithm that allows an agent to learn the optimal Q-function of a Markov decision process by applying the Bellman equation. The Markov decision process models an environment.",
    "name": "Q-learning",
    "orig_definition": "In reinforcement learning, an algorithm that allows an agent to learn the optimal Q-function of a Markov decision process by applying the Bellman equation. The Markov decision process models an environment.",
    "orig_name": "Q-learning",
    "source": "google_ml"
  },
  {
    "definition": "Each bucket in quantile bucketing.",
    "name": "quantile",
    "orig_definition": "Each bucket in quantile bucketing.",
    "orig_name": "quantile",
    "source": "google_ml"
  },
  {
    "definition": "Distributing a feature's values into buckets so that each bucket contains the same (or almost the same) number of examples. For example, the following figure divides 44 points into 4 buckets, each of which contains 11 points. In order for each bucket in the figure to contain the same number of points, some buckets span a different width of x-values.",
    "name": "quantile bucketing",
    "orig_definition": "Distributing a feature's values into buckets so that each bucket contains the same (or almost the same) number of examples.  For example, the following figure divides 44 points into 4 buckets, each of which contains 11 points.  In order for each bucket in the figure to contain the same number of points, some buckets span a different width of x-values.",
    "orig_name": "quantile bucketing",
    "source": "google_ml"
  },
  {
    "definition": "An algorithm that implements quantile bucketing on a particular feature in a dataset.",
    "name": "quantization",
    "orig_definition": "An algorithm that implements quantile bucketing on a particular feature in a dataset.",
    "orig_name": "quantization",
    "source": "google_ml"
  },
  {
    "definition": "A TensorFlow Operation that implements a queue data structure. Typically used in I/O.",
    "name": "queue",
    "orig_definition": "A TensorFlow Operation that implements a queue data structure. Typically used in I/O.",
    "orig_name": "queue",
    "source": "google_ml"
  },
  {
    "definition": "An ensemble approach to finding the decision tree that best fits the training data by creating many decision trees and then determining the \"average\" one. The \"random\" part of the term refers to building each of the decision trees from a random selection of features; the \"forest\" refers to the set of decision trees.",
    "name": "random forest",
    "orig_definition": "An ensemble approach to finding the decision tree that best fits the training data by creating many decision trees and then determining the \"average\" one. The \"random\" part of the term refers to building each of the decision trees from a random selection of features; the \"forest\" refers to the set of decision trees.",
    "orig_name": "random forest",
    "source": "google_ml"
  },
  {
    "definition": "In reinforcement learning, a policy that chooses an action at random.",
    "name": "random policy",
    "orig_definition": "In reinforcement learning, a policy that chooses an action at random.",
    "orig_name": "random policy",
    "source": "google_ml"
  },
  {
    "definition": "The ordinal position of a class in a machine learning problem that categorizes classes from highest to lowest. For example, a behavior ranking system could rank a dog's rewards from highest (a steak) to lowest (wilted kale).",
    "name": "rank",
    "orig_definition": "The ordinal position of a class in a machine learning problem that categorizes classes from highest to lowest. For example, a behavior ranking system could rank a dog's rewards from highest (a steak) to lowest (wilted kale).",
    "orig_name": "rank (ordinality)",
    "source": "google_ml"
  },
  {
    "definition": "The number of dimensions in a Tensor. For instance, a scalar has rank 0, a vector has rank 1, and a matrix has rank 2.",
    "name": "rank",
    "orig_definition": "The number of dimensions in a Tensor. For instance, a scalar has rank 0, a vector has rank 1, and a matrix has rank 2.",
    "orig_name": "rank (Tensor)",
    "source": "google_ml"
  },
  {
    "definition": "A human who provides labels in examples. Sometimes called an \"annotator.\"",
    "name": "rater",
    "orig_definition": "A human who provides labels in examples. Sometimes called an \"annotator.\"",
    "orig_name": "rater",
    "source": "google_ml"
  },
  {
    "definition": "A metric for classification models that answers the following question: Out of all the possible positive labels, how many did the model correctly identify?",
    "name": "recall",
    "orig_definition": "A metric for classification models that answers the following question: Out of all the possible positive labels, how many did the model correctly identify? That is:",
    "orig_name": "recall",
    "source": "google_ml"
  },
  {
    "definition": "A system that selects for each user a relatively small set of desirable items from a large corpus. For example, a video recommendation system might recommend two videos from a corpus of 100,000 videos, selecting Casablanca and The Philadelphia Story for one user, and Wonder Woman and Black Panther for another.",
    "name": "recommendation system",
    "orig_definition": "A system that selects for each user a relatively small set of desirable items from a large corpus. For example, a video recommendation system might recommend two videos from a corpus of 100,000 videos, selecting Casablanca and The Philadelphia Story for one user, and Wonder Woman and Black Panther for another. A video recommendation system might base its recommendations on factors such as:",
    "orig_name": "recommendation system",
    "source": "google_ml"
  },
  {
    "definition": "An activation function with the following rules:",
    "name": "Rectified Linear Unit",
    "orig_definition": "An activation function with the following rules:",
    "orig_name": "Rectified Linear Unit (ReLU)",
    "source": "google_ml"
  },
  {
    "definition": "A neural network that is intentionally run multiple times, where parts of each run feed into the next run. Specifically, hidden layers from the previous run provide part of the input to the same hidden layer in the next run. Recurrent neural networks are particularly useful for evaluating sequences, so that the hidden layers can learn from previous runs of the neural network on earlier parts of the sequence.",
    "name": "recurrent neural network",
    "orig_definition": "A neural network that is intentionally run multiple times, where parts of each run feed into the next run. Specifically, hidden layers from the previous run provide part of the input to the same hidden layer in the next run. Recurrent neural networks are particularly useful for evaluating sequences, so that the hidden layers can learn from previous runs of the neural network on earlier parts of the sequence.",
    "orig_name": "recurrent neural network",
    "source": "google_ml"
  },
  {
    "definition": "A type of model that outputs continuous (typically, floating-point) values. Compare with classification models, which output discrete values, such as \"day lily\" or \"tiger lily.\"",
    "name": "regression model",
    "orig_definition": "A type of model that outputs continuous (typically, floating-point) values. Compare with classification models, which output discrete values, such as \"day lily\" or \"tiger lily.\"",
    "orig_name": "regression model",
    "source": "google_ml"
  },
  {
    "definition": "The penalty on a model's complexity. Regularization helps prevent overfitting.",
    "name": "regularization",
    "orig_definition": "The penalty on a model's complexity. Regularization helps prevent overfitting. Different kinds of regularization include:",
    "orig_name": "regularization",
    "source": "google_ml"
  },
  {
    "definition": "A scalar value, represented as lambda, specifying the relative importance of the regularization function.",
    "name": "regularization rate",
    "orig_definition": "A scalar value, represented as lambda, specifying the relative importance of the regularization function. The following simplified loss equation shows the regularization rate's influence:",
    "orig_name": "regularization rate",
    "source": "google_ml"
  },
  {
    "definition": "A family of algorithms that learn an optimal policy, whose goal is to maximize return when interacting with an environment. For example, the ultimate reward of most games is victory. Reinforcement learning systems can become expert at playing complex games by evaluating sequences of previous game moves that ultimately led to wins and sequences that ultimately led to losses.",
    "name": "reinforcement learning",
    "orig_definition": "A family of algorithms that learn an optimal policy, whose goal is to maximize return when interacting with an environment. For example, the ultimate reward of most games is victory. Reinforcement learning systems can become expert at playing complex games by evaluating sequences of previous game moves that ultimately led to wins and sequences that ultimately led to losses.",
    "orig_name": "reinforcement learning (RL)",
    "source": "google_ml"
  },
  {
    "definition": "In DQN-like algorithms, the memory used by the agent to store state transitions for use in experience replay.",
    "name": "replay buffer",
    "orig_definition": "In DQN-like algorithms, the memory used by the agent to store state transitions for use in experience replay.",
    "orig_name": "replay buffer",
    "source": "google_ml"
  },
  {
    "definition": "The fact that the frequency with which people write about actions, outcomes, or properties is not a reflection of their real-world frequencies or the degree to which a property is characteristic of a class of individuals. Reporting bias can influence the composition of data that machine learning systems learn from.",
    "name": "reporting bias",
    "orig_definition": "The fact that the frequency with which people write about actions, outcomes, or properties is not a reflection of their real-world frequencies or the degree to which a property is characteristic of a class of individuals. Reporting bias can influence the composition of data that machine learning systems learn from.",
    "orig_name": "reporting bias",
    "source": "google_ml"
  },
  {
    "definition": "The process of mapping data to useful features.",
    "name": "representation",
    "orig_definition": "The process of mapping data to useful features.",
    "orig_name": "representation",
    "source": "google_ml"
  },
  {
    "definition": "The final stage of a recommendation system, during which scored items may be re-graded according to some other (typically, non-ML) algorithm.",
    "name": "re-ranking",
    "orig_definition": "The final stage of a recommendation system, during which scored items may be re-graded according to some other (typically, non-ML) algorithm. Re-ranking evaluates the list of items generated by the scoring phase, taking actions such as:",
    "orig_name": "re-ranking",
    "source": "google_ml"
  },
  {
    "definition": "In reinforcement learning, given a certain policy and a certain state, the return is the sum of all rewards that the agent expects to receive when following the policy from the state to the end of the episode. The agent accounts for the delayed nature of expected rewards by discounting rewards according to the state transitions required to obtain the reward.",
    "name": "return",
    "orig_definition": "In reinforcement learning, given a certain policy and a certain state, the return is the sum of all rewards that the agent expects to receive when following the policy from the state to the end of the episode. The agent accounts for the delayed nature of expected rewards by discounting rewards according to the state transitions required to obtain the reward.",
    "orig_name": "return",
    "source": "google_ml"
  },
  {
    "definition": "In reinforcement learning, the numerical result of taking an action in a state, as defined by the environment.",
    "name": "reward",
    "orig_definition": "In reinforcement learning, the numerical result of taking an action in a state, as defined by the environment.",
    "orig_name": "reward",
    "source": "google_ml"
  },
  {
    "definition": "A type of regularization that penalizes weights in proportion to the sum of the squares of the weights. L2 regularization helps drive outlier weights (those with high positive or low negative values) closer to 0 but not quite to 0. (Contrast with L1 regularization.) L2 regularization always improves generalization in linear models.",
    "name": "ridge regularization",
    "orig_definition": "Synonym for L2 regularization. The term ridge regularization is more frequently used in pure statistics contexts, whereas L2 regularization is used more often in machine learning.",
    "orig_name": "ridge regularization",
    "source": "google_ml"
  },
  {
    "definition": "Abbreviation for recurrent neural networks.",
    "name": "RNN",
    "orig_definition": "Abbreviation for recurrent neural networks.",
    "orig_name": "RNN",
    "source": "google_ml"
  },
  {
    "definition": "A curve of true positive rate vs. false positive rate at different classification thresholds.",
    "name": "ROC  Curve",
    "orig_definition": "A curve of true positive rate vs. false positive rate at different classification thresholds. See also AUC.",
    "orig_name": "ROC (receiver operating characteristic) Curve",
    "source": "google_ml"
  },
  {
    "definition": "The directory you specify for hosting subdirectories of the TensorFlow checkpoint and events files of multiple models.",
    "name": "root directory",
    "orig_definition": "The directory you specify for hosting subdirectories of the TensorFlow checkpoint and events files of multiple models.",
    "orig_name": "root directory",
    "source": "google_ml"
  },
  {
    "definition": "The square root of the Mean Squared Error.",
    "name": "Root Mean Squared Error",
    "orig_definition": "The square root of the Mean Squared Error.",
    "orig_name": "Root Mean Squared Error (RMSE)",
    "source": "google_ml"
  },
  {
    "definition": "In an image classification problem, an algorithm's ability to successfully classify images even when the orientation of the image changes. For example, the algorithm can still identify a tennis racket whether it is pointing up, sideways, or down. Note that rotational invariance is not always desirable; for example, an upside-down 9 should not be classified as a 9.",
    "name": "rotational invariance",
    "orig_definition": "In an image classification problem, an algorithm's ability to successfully classify images even when the orientation of the image changes. For example, the algorithm can still identify a tennis racket whether it is pointing up, sideways, or down. Note that rotational invariance is not always desirable; for example, an upside-down 9 should not be classified as a 9.",
    "orig_name": "rotational invariance",
    "source": "google_ml"
  },
  {
    "definition": "See selection bias.",
    "name": "sampling bias",
    "orig_definition": "See selection bias.",
    "orig_name": "sampling bias",
    "source": "google_ml"
  },
  {
    "definition": "The recommended format for saving and recovering TensorFlow models. SavedModel is a language-neutral, recoverable serialization format, which enables higher-level systems and tools to produce, consume, and transform TensorFlow models.",
    "name": "SavedModel",
    "orig_definition": "The recommended format for saving and recovering TensorFlow models. SavedModel is a language-neutral, recoverable serialization format, which enables higher-level systems and tools to produce, consume, and transform TensorFlow models.",
    "orig_name": "SavedModel",
    "source": "google_ml"
  },
  {
    "definition": "A TensorFlow object responsible for saving model checkpoints.",
    "name": "Saver",
    "orig_definition": "A TensorFlow object responsible for saving model checkpoints.",
    "orig_name": "Saver",
    "source": "google_ml"
  },
  {
    "definition": "A single number or a single string that can be represented as a tensor of rank 0.",
    "name": "scalar",
    "orig_definition": "A single number or a single string that can be represented as a tensor of rank 0. For example, the following lines of code each create one scalar in TensorFlow:",
    "orig_name": "scalar",
    "source": "google_ml"
  },
  {
    "definition": "A commonly used practice in feature engineering to tame a feature's range of values to match the range of other features in the dataset. For example, suppose that you want all floating-point features in the dataset to have a range of 0 to 1. Given a particular feature's range of 0 to 500, you could scale that feature by dividing each value by 500.",
    "name": "scaling",
    "orig_definition": "A commonly used practice in feature engineering to tame a feature's range of values to match the range of other features in the dataset. For example, suppose that you want all floating-point features in the dataset to have a range of 0 to 1. Given a particular feature's range of 0 to 500, you could scale that feature by dividing each value by 500.",
    "orig_name": "scaling",
    "source": "google_ml"
  },
  {
    "definition": "A popular open-source machine learning platform.",
    "name": "scikit-learn",
    "orig_definition": "A popular open-source machine learning platform. See www.scikit-learn.org.",
    "orig_name": "scikit-learn",
    "source": "google_ml"
  },
  {
    "definition": "The part of a recommendation system that provides a value or ranking for each item produced by the candidate generation phase.",
    "name": "scoring",
    "orig_definition": "The part of a recommendation system that provides a value or ranking for each item produced by the candidate generation phase.",
    "orig_name": "scoring",
    "source": "google_ml"
  },
  {
    "definition": "Errors in conclusions drawn from sampled data due to a selection process that generates systematic differences between samples observed in the data and those not observed.",
    "name": "selection bias",
    "orig_definition": "Errors in conclusions drawn from sampled data due to a selection process that generates systematic differences between samples observed in the data and those not observed.  The following forms of selection bias exist:",
    "orig_name": "selection bias",
    "source": "google_ml"
  },
  {
    "definition": "Training a model on data where some of the training examples have labels but others don\u2019t. One technique for semi-supervised learning is to infer labels for the unlabeled examples, and then to train on the inferred labels to create a new model. Semi-supervised learning can be useful if labels are expensive to obtain but unlabeled examples are plentiful.",
    "name": "semi-supervised learning",
    "orig_definition": "Training a model on data where some of the training examples have labels but others don\u2019t. One technique for semi-supervised learning is to infer labels for the unlabeled examples, and then to train on the inferred labels to create a new model. Semi-supervised learning can be useful if labels are expensive to obtain but unlabeled examples are plentiful.",
    "orig_name": "semi-supervised learning",
    "source": "google_ml"
  },
  {
    "definition": "sentiment analysis",
    "name": "sensitive attribute",
    "orig_definition": "sentiment analysis",
    "orig_name": "sensitive attribute",
    "source": "google_ml"
  },
  {
    "definition": "Using statistical or machine learning algorithms to determine a group's overall attitude\u2014positive or negative\u2014toward a service, product, organization, or topic. For example, using natural language understanding, an algorithm could perform sentiment analysis on the textual feedback from a university course to determine the degree to which students generally liked or disliked the course.",
    "name": "sentiment analysis",
    "orig_definition": "Using statistical or machine learning algorithms to determine a group's overall attitude\u2014positive or negative\u2014toward a service, product, organization, or topic. For example, using natural language understanding, an algorithm could perform sentiment analysis on the textual feedback from a university course to determine the degree to which students generally liked or disliked the course.",
    "orig_name": "sentiment analysis",
    "source": "google_ml"
  },
  {
    "definition": "A model whose inputs have a sequential dependence. For example, predicting the next video watched from a sequence of previously watched videos.",
    "name": "sequence model",
    "orig_definition": "A model whose inputs have a sequential dependence. For example, predicting the next video watched from a sequence of previously watched videos.",
    "orig_name": "sequence model",
    "source": "google_ml"
  },
  {
    "definition": "A synonym for inferring.",
    "name": "serving",
    "orig_definition": "A synonym for inferring.",
    "orig_name": "serving",
    "source": "google_ml"
  },
  {
    "definition": "An object that encapsulates the state of the TensorFlow runtime and runs all or part of a graph. When using the low-level TensorFlow APIs, you instantiate and manage one or more tf.session objects directly. When using the Estimators API, Estimators instantiate session objects for you.",
    "name": "session",
    "orig_definition": "An object that encapsulates the state of the TensorFlow runtime and runs all or part of a graph. When using the low-level TensorFlow APIs, you instantiate and manage one or more tf.session objects directly. When using the Estimators API, Estimators instantiate session objects for you.",
    "orig_name": "session (tf.session)",
    "source": "google_ml"
  },
  {
    "definition": "The number of elements in each dimension of a tensor. The shape is represented as a list of integers.",
    "name": "shape",
    "orig_definition": "The number of elements in each dimension of a tensor. The shape is represented as a list of integers. For example, the following two-dimensional tensor has a shape of [3,4]:",
    "orig_name": "shape (Tensor)",
    "source": "google_ml"
  },
  {
    "definition": "A function that maps logistic or multinomial regression output (log odds) to probabilities, returning a value between 0 and 1.",
    "name": "sigmoid function",
    "orig_definition": "A function that maps logistic or multinomial regression output (log odds) to probabilities, returning a value between 0 and 1.  The sigmoid function has the following formula:",
    "orig_name": "sigmoid function",
    "source": "google_ml"
  },
  {
    "definition": "In clustering algorithms, the metric used to determine how alike (how similar) any two examples are.",
    "name": "similarity measure",
    "orig_definition": "In clustering algorithms, the metric used to determine how alike (how similar) any two examples are.",
    "orig_name": "similarity measure",
    "source": "google_ml"
  },
  {
    "definition": "In an image classification problem, an algorithm's ability to successfully classify images even when the size of the image changes. For example, the algorithm can still identify a cat whether it consumes 2M pixels or 200K pixels. Note that even the best image classification algorithms still have practical limits on size invariance. For example, an algorithm (or human) is unlikely to correctly classify a cat image consuming only 20 pixels.",
    "name": "size invariance",
    "orig_definition": "In an image classification problem, an algorithm's ability to successfully classify images even when the size of the image changes. For example, the algorithm can still identify a cat whether it consumes 2M pixels or 200K pixels. Note that even the best image classification algorithms still have practical limits on size invariance. For example, an algorithm (or human) is unlikely to correctly classify a cat image consuming only 20 pixels.",
    "orig_name": "size invariance",
    "source": "google_ml"
  },
  {
    "definition": "In unsupervised machine learning, a category of algorithms that perform a preliminary similarity analysis on examples. Sketching algorithms use a  locality-sensitive hash function to identify points that are likely to be similar, and then group them into buckets.",
    "name": "sketching",
    "orig_definition": "In unsupervised machine learning, a category of algorithms that perform a preliminary similarity analysis on examples. Sketching algorithms use a  locality-sensitive hash function to identify points that are likely to be similar, and then group them into buckets.",
    "orig_name": "sketching",
    "source": "google_ml"
  },
  {
    "definition": "A function that provides probabilities for each possible class in a multi-class classification model. The probabilities add up to exactly 1.0. For example, softmax might determine that the probability of a particular image being a dog at 0.9, a cat at 0.08, and a horse at 0.02. (Also called full softmax.)",
    "name": "softmax",
    "orig_definition": "A function that provides probabilities for each possible class in a multi-class classification model. The probabilities add up to exactly 1.0. For example, softmax might determine that the probability of a particular image being a dog at 0.9, a cat at 0.08, and a horse at 0.02. (Also called full softmax.)",
    "orig_name": "softmax",
    "source": "google_ml"
  },
  {
    "definition": "Feature vector whose values are predominately zero or empty. For example, a vector containing a single 1 value and a million 0 values is sparse. As another example, words in a search query could also be a sparse feature\u2014there are many possible words in a given language, but only a few of them occur in a given query.",
    "name": "sparse feature",
    "orig_definition": "Feature vector whose values are predominately zero or empty. For example, a vector containing a single 1 value and a million 0 values is sparse. As another example, words in a search query could also be a sparse feature\u2014there are many possible words in a given language, but only a few of them occur in a given query.",
    "orig_name": "sparse feature",
    "source": "google_ml"
  },
  {
    "definition": "A representation of a tensor that only stores nonzero elements.",
    "name": "sparse representation",
    "orig_definition": "A representation of a tensor that only stores nonzero elements.",
    "orig_name": "sparse representation",
    "source": "google_ml"
  },
  {
    "definition": "A vector whose values are mostly zeroes.",
    "name": "sparse vector",
    "orig_definition": "A vector whose values are mostly zeroes. See also sparse feature.",
    "orig_name": "sparse vector",
    "source": "google_ml"
  },
  {
    "definition": "The number of elements set to zero (or null) in a vector or matrix divided by the total number of entries in that vector or matrix. For example, consider a 10x10 matrix in which 98 cells contain zero.",
    "name": "sparsity",
    "orig_definition": "The number of elements set to zero (or null) in a vector or matrix divided by the total number of entries in that vector or matrix. For example, consider a 10x10 matrix in which 98 cells contain zero. The calculation of sparsity is as follows:",
    "orig_name": "sparsity",
    "source": "google_ml"
  },
  {
    "definition": "See pooling.",
    "name": "spatial pooling",
    "orig_definition": "See pooling.",
    "orig_name": "spatial pooling",
    "source": "google_ml"
  },
  {
    "definition": "The square of the hinge loss. Squared hinge loss penalizes outliers more harshly than regular hinge loss.",
    "name": "squared hinge loss",
    "orig_definition": "The square of the hinge loss.  Squared hinge loss penalizes outliers more harshly than regular hinge loss.",
    "orig_name": "squared hinge loss",
    "source": "google_ml"
  },
  {
    "definition": "The loss function used in linear regression. (Also known as L2 Loss.) This function calculates the squares of the difference between a model's predicted value for a labeled example and the actual value of the label. Due to squaring, this loss function amplifies the influence of bad predictions. That is, squared loss reacts more strongly to outliers than L1 loss.",
    "name": "squared loss",
    "orig_definition": "The loss function used in linear regression.  (Also known as L2 Loss.) This function calculates the squares of the difference between a model's predicted value for a labeled example and the actual value of the label. Due to squaring, this loss function amplifies the influence of bad predictions. That is, squared loss reacts more strongly to outliers than L1 loss.",
    "orig_name": "squared loss",
    "source": "google_ml"
  },
  {
    "definition": "In reinforcement learning, the parameter values that describe the current configuration of the environment, which the agent uses to choose an action.",
    "name": "state",
    "orig_definition": "In reinforcement learning, the parameter values that describe the current configuration of the environment, which the agent uses to choose an action.",
    "orig_name": "state",
    "source": "google_ml"
  },
  {
    "definition": "In reinforcement learning, the function that predicts the expected return from taking an action in a state and then following a given policy.",
    "name": "state-action value function",
    "orig_definition": "Synonym for Q-function.",
    "orig_name": "state-action value function",
    "source": "google_ml"
  },
  {
    "definition": "A model that is trained offline.",
    "name": "static model",
    "orig_definition": "A model that is trained offline.",
    "orig_name": "static model",
    "source": "google_ml"
  },
  {
    "definition": "A property of data in a dataset, in which the data distribution stays constant across one or more dimensions. Most commonly, that dimension is time, meaning that data exhibiting stationarity doesn't change over time. For example, data that exhibits stationarity doesn't change from September to December.",
    "name": "stationarity",
    "orig_definition": "A property of data in a dataset, in which the data distribution stays constant across one or more dimensions. Most commonly, that dimension is time, meaning that data exhibiting stationarity doesn't change over time. For example, data that exhibits stationarity doesn't change from September to December.",
    "orig_name": "stationarity",
    "source": "google_ml"
  },
  {
    "definition": "A forward and backward evaluation of one batch.",
    "name": "step",
    "orig_definition": "A forward and backward evaluation of one batch.",
    "orig_name": "step",
    "source": "google_ml"
  },
  {
    "definition": "A scalar used to train a model via gradient descent. During each iteration, the gradient descent algorithm multiplies the learning rate by the gradient. The resulting product is called the gradient step.",
    "name": "step size",
    "orig_definition": "Synonym for learning rate.",
    "orig_name": "step size",
    "source": "google_ml"
  },
  {
    "definition": "A gradient descent algorithm in which the batch size is one. In other words, SGD relies on a single example chosen uniformly at random from a dataset to calculate an estimate of the gradient at each step.",
    "name": "stochastic gradient descent",
    "orig_definition": "A gradient descent algorithm in which the batch size is one. In other words, SGD relies on a single example chosen uniformly at random from a dataset to calculate an estimate of the gradient at each step.",
    "orig_name": "stochastic gradient descent (SGD)",
    "source": "google_ml"
  },
  {
    "definition": "In a convolutional operation or pooling, the delta in each dimension of the next series of input slices. For example, the following animation demonstrates a (1,1) stride during a convolutional operation. Therefore, the next input slice starts one position to the right of the previous input slice. When the operation reaches the right edge, the next slice is all the way over to the left but one position down.",
    "name": "stride",
    "orig_definition": "In a convolutional operation or pooling, the delta in each dimension of the next series of input slices. For example, the following animation demonstrates a (1,1) stride during a convolutional operation. Therefore, the next input slice starts one position to the right of the previous input slice. When the operation reaches the right edge, the next slice is all the way over to the left but one position down.",
    "orig_name": "stride",
    "source": "google_ml"
  },
  {
    "definition": "An algorithm that balances two goals:",
    "name": "structural risk minimization",
    "orig_definition": "An algorithm that balances two goals:",
    "orig_name": "structural risk minimization (SRM)",
    "source": "google_ml"
  },
  {
    "definition": "See pooling.",
    "name": "subsampling",
    "orig_definition": "See pooling.",
    "orig_name": "subsampling",
    "source": "google_ml"
  },
  {
    "definition": "In TensorFlow, a value or set of values calculated at a particular step, usually used for tracking model metrics during training.",
    "name": "summary",
    "orig_definition": "In TensorFlow, a value or set of values calculated at a particular step, usually used for tracking model metrics during training.",
    "orig_name": "summary",
    "source": "google_ml"
  },
  {
    "definition": "Training a model from input data and its corresponding labels. Supervised machine learning is analogous to a student learning a subject by studying a set of questions and their corresponding answers. After mastering the mapping between questions and answers, the student can then provide answers to new (never-before-seen) questions on the same topic. Compare with unsupervised machine learning.",
    "name": "supervised machine learning",
    "orig_definition": "Training a model from input data and its corresponding labels. Supervised machine learning is analogous to a student learning a subject by studying a set of questions and their corresponding answers.  After mastering the mapping between questions and answers, the student can then provide answers to new (never-before-seen) questions on the same topic.  Compare with unsupervised machine learning.",
    "orig_name": "supervised machine learning",
    "source": "google_ml"
  },
  {
    "definition": "A feature not present among the input features, but created from one or more of them.",
    "name": "synthetic feature",
    "orig_definition": "A feature not present among the input features, but created from one or more of them. Kinds of synthetic features include:",
    "orig_name": "synthetic feature",
    "source": "google_ml"
  },
  {
    "definition": "In reinforcement learning, implementing Q-learning by using a table to store the Q-functions for every combination of state and action.",
    "name": "tabular Q-learning",
    "orig_definition": "In reinforcement learning, implementing Q-learning by using a table to store the Q-functions for every combination of state and action.",
    "orig_name": "tabular Q-learning",
    "source": "google_ml"
  },
  {
    "definition": "In supervised learning, the \"answer\" or \"result\" portion of an example. Each example in a labeled dataset consists of one or more features and a label. For instance, in a housing dataset, the features might include the number of bedrooms, the number of bathrooms, and the age of the house, while the label might be the house's price. In a spam detection dataset, the features might include the subject line, the sender, and the email message itself, while the label would probably be either \"spam\" or \"not spam.\"",
    "name": "target",
    "orig_definition": "Synonym for label.",
    "orig_name": "target",
    "source": "google_ml"
  },
  {
    "definition": "In Deep Q-learning, a neural network that is a stable approximation of the main neural network, where the main neural network implements either a Q-function or a policy. Then, you can train the main network on the Q-values predicted by the target network. Therefore, you prevent the feedback loop that occurs when the main network trains on Q-values predicted by itself. By avoiding this feedback, training stability increases.",
    "name": "target network",
    "orig_definition": "In Deep Q-learning, a neural network that is a stable approximation of the main neural network, where the main neural network implements either a Q-function or a policy. Then, you can train the main network on the Q-values predicted by the target network. Therefore, you prevent the feedback loop that occurs when the main network trains on Q-values predicted by itself. By avoiding this feedback, training stability increases.",
    "orig_name": "target network",
    "source": "google_ml"
  },
  {
    "definition": "Data recorded at different points in time. For example, winter coat sales recorded for each day of the year would be temporal data.",
    "name": "temporal data",
    "orig_definition": "Data recorded at different points in time. For example, winter coat sales recorded for each day of the year would be temporal data.",
    "orig_name": "temporal data",
    "source": "google_ml"
  },
  {
    "definition": "The primary data structure in TensorFlow programs. Tensors are N-dimensional (where N could be very large) data structures, most commonly scalars, vectors, or matrices. The elements of a Tensor can hold integer, floating-point, or string values.",
    "name": "Tensor",
    "orig_definition": "The primary data structure in TensorFlow programs. Tensors are N-dimensional (where N could be very large) data structures, most commonly scalars, vectors, or matrices. The elements of a Tensor can hold integer, floating-point, or string values.",
    "orig_name": "Tensor",
    "source": "google_ml"
  },
  {
    "definition": "The dashboard that displays the summaries saved during the execution of one or more TensorFlow programs.",
    "name": "TensorBoard",
    "orig_definition": "The dashboard that displays the summaries saved during the execution of one or more TensorFlow programs.",
    "orig_name": "TensorBoard",
    "source": "google_ml"
  },
  {
    "definition": "A large-scale, distributed, machine learning platform. The term also refers to the base API layer in the TensorFlow stack, which supports general computation on dataflow graphs.",
    "name": "TensorFlow",
    "orig_definition": "A large-scale, distributed, machine learning platform. The term also refers to the base API layer in the TensorFlow stack, which supports general computation on dataflow graphs.",
    "orig_name": "TensorFlow",
    "source": "google_ml"
  },
  {
    "definition": "A program that visualizes how different hyperparameters influence model (primarily neural network) training. Go to  http://playground.tensorflow.org to experiment with TensorFlow Playground.",
    "name": "TensorFlow Playground",
    "orig_definition": "A program that visualizes how different hyperparameters influence model (primarily neural network) training. Go to  http://playground.tensorflow.org to experiment with TensorFlow Playground.",
    "orig_name": "TensorFlow Playground",
    "source": "google_ml"
  },
  {
    "definition": "A platform to deploy trained models in production.",
    "name": "TensorFlow Serving",
    "orig_definition": "A platform to deploy trained models in production.",
    "orig_name": "TensorFlow Serving",
    "source": "google_ml"
  },
  {
    "definition": "An application-specific integrated circuit (ASIC) that optimizes the performance of machine learning workloads. These ASICs are deployed as multiple TPU chips on a TPU device.",
    "name": "Tensor Processing Unit",
    "orig_definition": "An application-specific integrated circuit (ASIC) that optimizes the performance of machine learning workloads. These ASICs are deployed as multiple TPU chips on a TPU device.",
    "orig_name": "Tensor Processing Unit (TPU)",
    "source": "google_ml"
  },
  {
    "definition": "See rank (Tensor).",
    "name": "Tensor rank",
    "orig_definition": "See rank (Tensor).",
    "orig_name": "Tensor rank",
    "source": "google_ml"
  },
  {
    "definition": "The number of elements a Tensor contains in various dimensions. For example, a [5, 10] Tensor has a shape of 5 in one dimension and 10 in another.",
    "name": "Tensor shape",
    "orig_definition": "The number of elements a Tensor contains in various dimensions. For example, a [5, 10] Tensor has a shape of 5 in one dimension and 10 in another.",
    "orig_name": "Tensor shape",
    "source": "google_ml"
  },
  {
    "definition": "The total number of scalars a Tensor contains. For example, a [5, 10] Tensor has a size of 50.",
    "name": "Tensor size",
    "orig_definition": "The total number of scalars a Tensor contains. For example, a [5, 10] Tensor has a size of 50.",
    "orig_name": "Tensor size",
    "source": "google_ml"
  },
  {
    "definition": "In reinforcement learning, the conditions that determine when an episode ends, such as when the agent reaches a certain state or exceeds a threshold number of state transitions. For example, in tic-tac-toe (also known as noughts and crosses), an episode terminates either when a player marks three consecutive spaces or when all spaces are marked.",
    "name": "termination condition",
    "orig_definition": "In reinforcement learning, the conditions that determine when an episode ends, such as when the agent reaches a certain state or exceeds a threshold number of state transitions. For example, in tic-tac-toe (also known as noughts and crosses), an episode terminates either when a player marks three consecutive spaces or when all spaces are marked.",
    "orig_name": "termination condition",
    "source": "google_ml"
  },
  {
    "definition": "A standard  protocol buffer for describing input data for machine learning model training or inference.",
    "name": "tf.Example",
    "orig_definition": "A standard  protocol buffer for describing input data for machine learning model training or inference.",
    "orig_name": "tf.Example",
    "source": "google_ml"
  },
  {
    "definition": "An implementation of Keras integrated into TensorFlow.",
    "name": "tf.keras",
    "orig_definition": "An implementation of Keras integrated into TensorFlow.",
    "orig_name": "tf.keras",
    "source": "google_ml"
  },
  {
    "definition": "A subfield of machine learning and statistics that analyzes temporal data. Many types of machine learning problems require time series analysis, including classification, clustering, forecasting, and anomaly detection. For example, you could use time series analysis to forecast the future sales of winter coats by month based on historical sales data.",
    "name": "time series analysis",
    "orig_definition": "A subfield of machine learning and statistics that analyzes temporal data.  Many types of machine learning problems require time series analysis, including classification, clustering, forecasting, and anomaly detection. For example, you could use time series analysis to forecast the future sales of winter coats by month based on historical sales data.",
    "orig_name": "time series analysis",
    "source": "google_ml"
  },
  {
    "definition": "One \"unrolled\" cell within a recurrent neural network.",
    "name": "timestep",
    "orig_definition": "One \"unrolled\" cell within a recurrent neural network. For example, the following figure shows three timesteps (labeled with the subscripts t-1, t, and t+1):",
    "orig_name": "timestep",
    "source": "google_ml"
  },
  {
    "definition": "A component of a deep neural network that is itself a deep neural network without an output layer. Typically, each tower reads from an independent data source. Towers are independent until their output is combined in a final layer.",
    "name": "tower",
    "orig_definition": "A component of a deep neural network that is itself a deep neural network without an output layer. Typically, each tower reads from an independent data source. Towers are independent until their output is combined in a final layer.",
    "orig_name": "tower",
    "source": "google_ml"
  },
  {
    "definition": "Abbreviation for Tensor Processing Unit.",
    "name": "TPU",
    "orig_definition": "Abbreviation for Tensor Processing Unit.",
    "orig_name": "TPU",
    "source": "google_ml"
  },
  {
    "definition": "A programmable linear algebra accelerator with on-chip high bandwidth memory that is optimized for machine learning workloads. Multiple TPU chips are deployed on a TPU device.",
    "name": "TPU chip",
    "orig_definition": "A programmable linear algebra accelerator with on-chip high bandwidth memory that is optimized for machine learning workloads. Multiple TPU chips are deployed on a TPU device.",
    "orig_name": "TPU chip",
    "source": "google_ml"
  },
  {
    "definition": "A printed circuit board (PCB) with multiple TPU chips, high bandwidth network interfaces, and system cooling hardware.",
    "name": "TPU device",
    "orig_definition": "A printed circuit board (PCB) with multiple TPU chips, high bandwidth network interfaces, and system cooling hardware.",
    "orig_name": "TPU device",
    "source": "google_ml"
  },
  {
    "definition": "The central coordination process running on a host machine that sends and receives data, results, programs, performance, and system health information to the TPU workers. The TPU master also manages the setup and shutdown of TPU devices.",
    "name": "TPU master",
    "orig_definition": "The central coordination process running on a host machine that sends and receives data, results, programs, performance, and system health information to the TPU workers. The TPU master also manages the setup and shutdown of TPU devices.",
    "orig_name": "TPU master",
    "source": "google_ml"
  },
  {
    "definition": "A TPU resource on Google Cloud Platform with a specific TPU type. The TPU node connects to your VPC Network from a peer VPC network. TPU nodes are a resource defined in the Cloud TPU API.",
    "name": "TPU node",
    "orig_definition": "A TPU resource on Google Cloud Platform with a specific TPU type. The TPU node connects to your VPC Network from a peer VPC network. TPU nodes are a resource defined in the Cloud TPU API.",
    "orig_name": "TPU node",
    "source": "google_ml"
  },
  {
    "definition": "A specific configuration of TPU devices in a Google data center. All of the devices in a TPU pod are connected to one another over a dedicated high-speed network. A TPU Pod is the largest configuration of TPU devices available for a specific TPU version.",
    "name": "TPU Pod",
    "orig_definition": "A specific configuration of TPU devices in a Google data center. All of the devices in a TPU pod are connected to one another over a dedicated high-speed network. A TPU Pod is the largest configuration of TPU devices available for a specific TPU version.",
    "orig_name": "TPU Pod",
    "source": "google_ml"
  },
  {
    "definition": "A TPU entity on Google Cloud Platform that you create, manage, or consume. For example, TPU nodes and TPU types are TPU resources.",
    "name": "TPU resource",
    "orig_definition": "A TPU entity on Google Cloud Platform that you create, manage, or consume. For example, TPU nodes and TPU types are TPU resources.",
    "orig_name": "TPU resource",
    "source": "google_ml"
  },
  {
    "definition": "A TPU slice is a fractional portion of the TPU devices in a TPU Pod. All of the devices in a TPU slice are connected to one another over a dedicated high-speed network.",
    "name": "TPU slice",
    "orig_definition": "A TPU slice is a fractional portion of the TPU devices in a TPU Pod. All of the devices in a TPU slice are connected to one another over a dedicated high-speed network.",
    "orig_name": "TPU slice",
    "source": "google_ml"
  },
  {
    "definition": "A configuration of one or more TPU devices with a specific TPU hardware version. You select a TPU type when you create a TPU node on Google Cloud Platform. For example, a v2-8 TPU type is a single TPU v2 device with 8 cores. A v3-2048 TPU type has 256 networked TPU v3 devices and a total of 2048 cores. TPU types are a resource defined in the Cloud TPU API.",
    "name": "TPU type",
    "orig_definition": "A configuration of one or more TPU devices with a specific TPU hardware version. You select a TPU type when you create a TPU node on Google Cloud Platform. For example, a v2-8 TPU type is a single TPU v2 device with 8 cores. A v3-2048 TPU type has 256 networked TPU v3 devices and a total of 2048 cores. TPU types are a resource defined in the Cloud TPU API.",
    "orig_name": "TPU type",
    "source": "google_ml"
  },
  {
    "definition": "A process that runs on a host machine and executes machine learning programs on TPU devices.",
    "name": "TPU worker",
    "orig_definition": "A process that runs on a host machine and executes machine learning programs on TPU devices.",
    "orig_name": "TPU worker",
    "source": "google_ml"
  },
  {
    "definition": "The process of determining the ideal parameters comprising a model.",
    "name": "training",
    "orig_definition": "The process of determining the ideal parameters comprising a model.",
    "orig_name": "training",
    "source": "google_ml"
  },
  {
    "definition": "The subset of the dataset used to train a model.",
    "name": "training set",
    "orig_definition": "The subset of the dataset used to train a model.",
    "orig_name": "training set",
    "source": "google_ml"
  },
  {
    "definition": "In reinforcement learning, a sequence of tuples that represent a sequence of state transitions of the agent, where each tuple corresponds to the state, action, reward, and next state for a given state transition.",
    "name": "trajectory",
    "orig_definition": "In reinforcement learning, a sequence of tuples that represent a sequence of state transitions of the agent, where each tuple corresponds to the state, action, reward, and next state for a given state transition.",
    "orig_name": "trajectory",
    "source": "google_ml"
  },
  {
    "definition": "Transferring information from one machine learning task to another. For example, in multi-task learning, a single model solves multiple tasks, such as a deep model that has different output nodes for different tasks. Transfer learning might involve transferring knowledge from the solution of a simpler task to a more complex one, or involve transferring knowledge from a task where there is more data to one where there is less data.",
    "name": "transfer learning",
    "orig_definition": "Transferring information from one machine learning task to another. For example, in multi-task learning, a single model solves multiple tasks, such as a deep model that has different output nodes for different tasks.  Transfer learning might involve transferring knowledge from the solution of a simpler task to a more complex one, or involve transferring knowledge from a task where there is more data to one where there is less data.",
    "orig_name": "transfer learning",
    "source": "google_ml"
  },
  {
    "definition": "In an image classification problem, an algorithm's ability to successfully classify images even when the position of objects within the image changes. For example, the algorithm can still identify a dog, whether it is in the center of the frame or at the left end of the frame.",
    "name": "translational invariance",
    "orig_definition": "In an image classification problem, an algorithm's ability to successfully classify images even when the position of objects within the image changes. For example, the algorithm can still identify a dog, whether it is in the center of the frame or at the left end of the frame.",
    "orig_name": "translational invariance",
    "source": "google_ml"
  },
  {
    "definition": "An N-gram in which N=3.",
    "name": "trigram",
    "orig_definition": "An N-gram in which N=3.",
    "orig_name": "trigram",
    "source": "google_ml"
  },
  {
    "definition": "An example in which the model correctly predicted the negative class. For example, the model inferred that a particular email message was not spam, and that email message really was not spam.",
    "name": "true negative",
    "orig_definition": "An example in which the model correctly predicted the negative class. For example, the model inferred that a particular email message was not spam, and that email message really was not spam.",
    "orig_name": "true negative (TN)",
    "source": "google_ml"
  },
  {
    "definition": "An example in which the model correctly predicted the positive class. For example, the model inferred that a particular email message was spam, and that email message really was spam.",
    "name": "true positive",
    "orig_definition": "An example in which the model correctly predicted the positive class. For example, the model inferred that a particular email message was spam, and that email message really was spam.",
    "orig_name": "true positive (TP)",
    "source": "google_ml"
  },
  {
    "definition": "A metric for classification models that answers the following question: Out of all the possible positive labels, how many did the model correctly identify?",
    "name": "true positive rate",
    "orig_definition": "Synonym for recall. That is:",
    "orig_name": "true positive rate (TPR)",
    "source": "google_ml"
  },
  {
    "definition": "A situation in which sensitive attributes are present, but not included in the training data. Because sensitive attributes are often correlated with other attributes of one\u2019s data, a model trained with unawareness about a sensitive attribute could still have disparate impact with respect to that attribute, or violate other fairness constraints.",
    "name": "unawareness",
    "orig_definition": "A situation in which sensitive attributes are present, but not included in the training data. Because sensitive attributes are often correlated with other attributes of one\u2019s data, a model trained with unawareness about a sensitive attribute could still have disparate impact with respect to that attribute, or violate other fairness constraints.",
    "orig_name": "unawareness (to a sensitive attribute)",
    "source": "google_ml"
  },
  {
    "definition": "Producing a model with poor predictive ability because the model hasn't captured the complexity of the training data.",
    "name": "underfitting",
    "orig_definition": "Producing a model with poor predictive ability because the model hasn't captured the complexity of the training data. Many problems can cause underfitting, including:",
    "orig_name": "underfitting",
    "source": "google_ml"
  },
  {
    "definition": "An example that contains features but no label. Unlabeled examples are the input to inference. In semi-supervised and unsupervised learning, unlabeled examples are used during training.",
    "name": "unlabeled example",
    "orig_definition": "An example that contains features but no label. Unlabeled examples are the input to inference. In semi-supervised and unsupervised learning, unlabeled examples are used during training.",
    "orig_name": "unlabeled example",
    "source": "google_ml"
  },
  {
    "definition": "Training a model to find patterns in a dataset, typically an unlabeled dataset.",
    "name": "unsupervised machine learning",
    "orig_definition": "Training a model to find patterns in a dataset, typically an unlabeled dataset.",
    "orig_name": "unsupervised machine learning",
    "source": "google_ml"
  },
  {
    "definition": "Applying a weight to the downsampled class equal to the factor by which you downsampled.",
    "name": "upweighting",
    "orig_definition": "Applying a weight to the downsampled class equal to the factor by which you downsampled.",
    "orig_name": "upweighting",
    "source": "google_ml"
  },
  {
    "definition": "In recommendation systems, an embedding generated by matrix factorization that holds latent signals about user preferences. Each row of the user matrix holds information about the relative strength of various latent signals for a single user. For example, consider a movie recommendation system. In this system, the latent signals in the user matrix might represent each user's interest in particular genres, or might be harder-to-interpret signals that involve complex interactions across multiple factors.",
    "name": "user matrix",
    "orig_definition": "In recommendation systems, an embedding generated by matrix factorization that holds latent signals about user preferences. Each row of the user matrix holds information about the relative strength of various latent signals for a single user. For example, consider a movie recommendation system.  In this system, the latent signals in the user matrix might represent each user's interest in particular genres, or might be harder-to-interpret signals that involve complex interactions across multiple factors.",
    "orig_name": "user matrix",
    "source": "google_ml"
  },
  {
    "definition": "A process used, as part of training, to evaluate the quality of a machine learning model using the validation set. Because the validation set is disjoint from the training set, validation helps ensure that the model\u2019s performance generalizes beyond the training set.",
    "name": "validation",
    "orig_definition": "A process used, as part of training, to evaluate the quality of a machine learning model using the validation set. Because the validation set is disjoint from the training set, validation helps ensure that the model\u2019s performance generalizes beyond the training set.",
    "orig_name": "validation",
    "source": "google_ml"
  },
  {
    "definition": "A subset of the dataset\u2014disjoint from the training set\u2014used in validation.",
    "name": "validation set",
    "orig_definition": "A subset of the dataset\u2014disjoint from the training set\u2014used in validation.",
    "orig_name": "validation set",
    "source": "google_ml"
  },
  {
    "definition": "The tendency for the gradients of early hidden layers of some deep neural networks to become surprisingly flat (low). Increasingly lower gradients result in increasingly smaller changes to the weights on nodes in a deep neural network, leading to little or no learning. Models suffering from the vanishing gradient problem become difficult or impossible to train. Long Short-Term Memory cells address this issue.",
    "name": "vanishing gradient problem",
    "orig_definition": "The tendency for the gradients of early hidden layers of some deep neural networks to become surprisingly flat (low). Increasingly lower gradients result in increasingly smaller changes to the weights on nodes in a deep neural network, leading to little or no learning. Models suffering from the vanishing gradient problem become difficult or impossible to train. Long Short-Term Memory cells address this issue.",
    "orig_name": "vanishing gradient problem",
    "source": "google_ml"
  },
  {
    "definition": "One of the loss functions commonly used in generative adversarial networks, based on the earth-mover's distance between the distribution of generated data and real data.",
    "name": "Wasserstein loss",
    "orig_definition": "One of the loss functions commonly used in generative adversarial networks, based on the earth-mover's distance between the distribution of generated data and real data.",
    "orig_name": "Wasserstein loss",
    "source": "google_ml"
  },
  {
    "definition": "A coefficient for a feature in a linear model, or an edge in a deep network. The goal of training a linear model is to determine the ideal weight for each feature. If a weight is 0, then its corresponding feature does not contribute to the model.",
    "name": "weight",
    "orig_definition": "A coefficient for a feature in a linear model, or an edge in a deep network. The goal of training a linear model is to determine the ideal weight for each feature. If a weight is 0, then its corresponding feature does not contribute to the model.",
    "orig_name": "weight",
    "source": "google_ml"
  },
  {
    "definition": "An algorithm for minimizing the objective function during matrix factorization in recommendation systems, which allows a downweighting of the missing examples. WALS minimizes the weighted squared error between the original matrix and the reconstruction by alternating between fixing the row factorization and column factorization. Each of these optimizations can be solved by least squares convex optimization. For details, see the Recommendation Systems course",
    "name": "Weighted Alternating Least Squares",
    "orig_definition": "An algorithm for minimizing the objective function during matrix factorization in recommendation systems, which allows a downweighting of the missing examples. WALS minimizes the weighted squared error between the original matrix and the reconstruction by alternating between fixing the row factorization and column factorization. Each of these optimizations can be solved by least squares convex optimization. For details, see the Recommendation Systems course",
    "orig_name": "Weighted Alternating Least Squares (WALS)",
    "source": "google_ml"
  },
  {
    "definition": "A linear model that typically has many sparse input features. We refer to it as \"wide\" since such a model is a special type of neural network with a large number of inputs that connect directly to the output node. Wide models are often easier to debug and inspect than deep models. Although wide models cannot express nonlinearities through hidden layers, they can use transformations such as feature crossing and bucketization to model nonlinearities in different ways.",
    "name": "wide model",
    "orig_definition": "A linear model that typically has many sparse input features. We refer to it as \"wide\" since such a model is a special type of neural network with a large number of inputs that connect directly to the output node. Wide models are often easier to debug and inspect than deep models. Although wide models cannot express nonlinearities through hidden layers, they can use transformations such as feature crossing and bucketization to model nonlinearities in different ways.",
    "orig_name": "wide model",
    "source": "google_ml"
  },
  {
    "definition": "The number of neurons in a particular layer of a neural network.",
    "name": "width",
    "orig_definition": "The number of neurons in a particular layer of a neural network.",
    "orig_name": "width",
    "source": "google_ml"
  }
]
