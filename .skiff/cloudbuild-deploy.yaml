# This file tells Google Cloud Build how to deploy the application.
# It can be attached to a variety of triggers, the default being whenever
# someone merges changes to the `master` branch.
steps:
# Pull down the latest versions of each Docker image, so the build is faster.
- id: 'api.pull'
  name: 'gcr.io/cloud-builders/docker'
  entrypoint: '/bin/bash'
  args: [
    '-c',
    'docker pull gcr.io/$PROJECT_ID/$REPO_NAME-api:latest || exit 0'
  ]
  waitFor: [ '-' ]
- id: 'ui-build.pull'
  name: 'gcr.io/cloud-builders/docker'
  entrypoint: '/bin/bash'
  args: [
    '-c',
    'docker pull gcr.io/$PROJECT_ID/$REPO_NAME-ui-build:latest || exit 0'
  ]
  waitFor: [ '-' ]
- id: 'ui.pull'
  name: 'gcr.io/cloud-builders/docker'
  entrypoint: '/bin/bash'
  args: [
    '-c',
    'docker pull gcr.io/$PROJECT_ID/$REPO_NAME-ui:latest || exit 0'
  ]
  waitFor: [ '-' ]
- id: 'ingress.pull'
  name: 'gcr.io/cloud-builders/docker'
  entrypoint: '/bin/bash'
  args: [
    '-c',
    'docker pull gcr.io/$PROJECT_ID/$REPO_NAME-ingress:latest || exit 0'
  ]
  waitFor: [ '-' ]
# Build docker images for each piece of the puzzle
- id: 'api.build'
  name: 'gcr.io/cloud-builders/docker'
  args: [
    'build',
    '-t', 'gcr.io/$PROJECT_ID/$REPO_NAME-api:latest',
    '-t', 'gcr.io/$PROJECT_ID/$REPO_NAME-api:$COMMIT_SHA',
    '--cache-from', 'gcr.io/$PROJECT_ID/$REPO_NAME-api:latest',
    '.',
    '--build-arg', 'NODE_ENV=production'
  ]
  waitFor: [ 'api.pull' ]
  dir: 'api'
- id: 'ui-build.build'
  name: 'gcr.io/cloud-builders/docker'
  args: [
    'build',
    '--target', 'build',
    '-t', 'gcr.io/$PROJECT_ID/$REPO_NAME-ui-build:latest',
    '-t', 'gcr.io/$PROJECT_ID/$REPO_NAME-ui-build:$COMMIT_SHA',
    '--cache-from', 'gcr.io/$PROJECT_ID/$REPO_NAME-ui-build:latest',
    '.',
    '--build-arg', 'NODE_ENV=production'
  ]
  waitFor: [ 'ui-build.pull' ]
  dir: 'ui'
- id: 'ui.build'
  name: 'gcr.io/cloud-builders/docker'
  args: [
    'build',
    '-t', 'gcr.io/$PROJECT_ID/$REPO_NAME-ui:latest',
    '-t', 'gcr.io/$PROJECT_ID/$REPO_NAME-ui:$COMMIT_SHA',
    '--cache-from', 'gcr.io/$PROJECT_ID/$REPO_NAME-ui:latest',
    '--cache-from', 'gcr.io/$PROJECT_ID/$REPO_NAME-ui-build:latest',
    '.',
    '--build-arg', 'NODE_ENV=production',
    '--build-arg', 'BABEL_ENV=production'
  ]
  waitFor: [ 'ui.pull', 'ui-build.build' ]
  dir: 'ui'
- id: 'ingress.build'
  name: 'gcr.io/cloud-builders/docker'
  args: [
    'build',
    '-t', 'gcr.io/$PROJECT_ID/$REPO_NAME-ingress:latest',
    '-t', 'gcr.io/$PROJECT_ID/$REPO_NAME-ingress:$COMMIT_SHA',
    '--cache-from', 'gcr.io/$PROJECT_ID/$REPO_NAME-ingress:latest',
    '.',
    '--build-arg', 'CONF_FILE=prod.conf'
  ]
  waitFor: [ 'ingress.pull' ]
  dir: 'ingress'
- id: 'api.push'
  name: 'gcr.io/cloud-builders/docker'
  args: [
    'push',
    'gcr.io/$PROJECT_ID/$REPO_NAME-api:$COMMIT_SHA',
  ]
  waitFor: [ 'api.build' ]
- id: 'ui.push'
  name: 'gcr.io/cloud-builders/docker'
  args: [
    'push',
    'gcr.io/$PROJECT_ID/$REPO_NAME-ui:$COMMIT_SHA',
  ]
  waitFor: [ 'ui.build' ]
- id: 'ingress.push'
  name: 'gcr.io/cloud-builders/docker'
  args: [
    'push',
    'gcr.io/$PROJECT_ID/$REPO_NAME-ingress:$COMMIT_SHA'
  ]
  waitFor: [ 'ingress.build' ]
# Generate our Kubernetes configuration
- id: 'config'
  name: 'gcr.io/ai2-reviz/jsonnet'
  args: [
    'eval',
    '-y',
    '--output-file', './webapp.json',
    '--tla-str', 'env=$_ENV',
    '--tla-str', 'apiImage=gcr.io/$PROJECT_ID/$REPO_NAME-api:$COMMIT_SHA',
    '--tla-str', 'uiImage=gcr.io/$PROJECT_ID/$REPO_NAME-ui:$COMMIT_SHA',
    '--tla-str', 'ingressImage=gcr.io/$PROJECT_ID/$REPO_NAME-ingress:$COMMIT_SHA',
    '--tla-str', 'sha=$COMMIT_SHA',
    '--tla-str', 'cause=Automated Skiff Deploy SHA:$COMMIT_SHA BUILD:$BUILD_ID',
    '--tla-str', 'branch=$BRANCH_NAME',
    '--tla-str', 'repo=$REPO_NAME',
    '--tla-str', 'buildId=$BUILD_ID',
    './webapp.jsonnet'
  ]
  dir: '.skiff'
  waitFor: [ '-' ]
# Deploy the image to Kubernetes
- id: 'deploy'
  name: 'gcr.io/ai2-reviz/rudder'
  args: [
    'deploy',
    '-f',
    'webapp.json'
  ]
  dir: '.skiff'
  waitFor: [ 'api.push', 'ui.push', 'ingress.push' ]
substitutions:
  _ENV: staging
images: [
  'gcr.io/$PROJECT_ID/$REPO_NAME-api:$COMMIT_SHA',
  'gcr.io/$PROJECT_ID/$REPO_NAME-api:latest',
  'gcr.io/$PROJECT_ID/$REPO_NAME-ui:$COMMIT_SHA',
  'gcr.io/$PROJECT_ID/$REPO_NAME-ui:latest',
  'gcr.io/$PROJECT_ID/$REPO_NAME-ingress:$COMMIT_SHA',
  'gcr.io/$PROJECT_ID/$REPO_NAME-ingress:latest',
  'gcr.io/$PROJECT_ID/$REPO_NAME-ui-build:latest'
]
artifacts:
  objects:
    location: 'gs://skiff-archive/$REPO_NAME/$_ENV/$BUILD_ID/$COMMIT_SHA'
    paths: ['.skiff/webapp.json']
